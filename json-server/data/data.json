{
  "blog": [
    {
      "id": 1,
      "title": "Moving Design Beyond Pictures",
      "author": "Derek Carter",
      "publicationDate": "2018-06-21T04:00:00.000Z",
      "summary": "Quickly create real Angular prototypes without writing code.",
      "content": "<p id=\"5d61\">Designers put a lot of time into designing components and features for their products, however there often still remains a gap between a designer&rsquo;s vision and a developer&rsquo;s reality.</p>\n<p>&nbsp;</p>\n<p id=\"16e3\">&ldquo;An author can write a book. A musician can compose a song, an animator can compose a short, a painter can compose a painting. But most dynamic artists cannot realize their own creations, and this breaks my heart.&rdquo; &mdash; Bret Victor in&nbsp;<a href=\"http://worrydream.com/DynamicPicturesMotivation/\" target=\"_blank\" rel=\"noopener\" data-href=\"http://worrydream.com/DynamicPicturesMotivation/\">Dynamic Pictures</a></p>\n<p>&nbsp;</p>\n<h3 id=\"3a92\">We want to change that&hellip;&nbsp;soon</h3>\n<p>&nbsp;</p>\n<p id=\"ddd5\">We are a team of UX Engineers at Google that is partnering with Angular on their&nbsp;<a href=\"https://www.youtube.com/watch?v=LP-fNM8OITI\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.youtube.com/watch?v=LP-fNM8OITI\">Angular for Designers initiative</a>. While a public launch is still months away, we have begun building a WYSIWYG prototyping tool that allows designers to use Angular components to create realistic, data-driven prototypes.</p>\n<p>&nbsp;</p>\n<p id=\"809b\">Many articles have been written about&nbsp;<a href=\"https://medium.com/bridge-collection/modern-design-tools-adaptive-layouts-e236070856e3\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/bridge-collection/modern-design-tools-adaptive-layouts-e236070856e3\">the unresponsive nature of current design tools</a>&nbsp;that&nbsp;<a href=\"https://medium.com/bridge-collection/modern-design-tools-using-real-data-62d499e97482\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/bridge-collection/modern-design-tools-using-real-data-62d499e97482\">lack real data</a>; designers are not able to work in a medium that feels like their final product. Instead, designers are limited to creating static mockups that don&rsquo;t convey experiences well and are often on their own if they want to build a more interactive prototype.</p>\n<p>&nbsp;</p>\n<p id=\"69fd\">Designers are ready for a dynamic, data-driven way of working and the web is capable of delivering the tools they want. The tools we use shape our thoughts and define the limit of what&rsquo;s possible. Change the tools and change our thinking.</p>\n<figure id=\"fd3d\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*Zj3oY19h-spFIddVpFu3uQ.gif\" data-width=\"800\" data-height=\"450\" data-is-featured=\"true\" data-action=\"zoom\" data-action-value=\"1*Zj3oY19h-spFIddVpFu3uQ.gif\" data-scroll=\"native\"><canvas width=\"75\" height=\"41\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*Zj3oY19h-spFIddVpFu3uQ.gif\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*Zj3oY19h-spFIddVpFu3uQ.gif\" /></div>\n</div>\n<figcaption>Quickly create a new page from a template, edit, and export&nbsp;code.</figcaption>\n</figure>\n<h3>&nbsp;</h3>\n<h3 id=\"5815\">Build together. Build to&nbsp;scale.</h3>\n<p>&nbsp;</p>\n<p id=\"85be\">We envision teams with more efficient communication between design and development. Because of the different mediums that designers and developers work in (mockups vs. code) communication does not happen naturally. However, in a world where a designer is able to assemble a page using the same components as a developer, they can now speak the same language.</p>\n<p>&nbsp;</p>\n<p id=\"17f6\">Companies have invested in componentizing their design systems (think&nbsp;<a href=\"https://material.io/develop/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://material.io/develop/\">Material</a>&nbsp;or&nbsp;<a href=\"https://vmware.github.io/clarity/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://vmware.github.io/clarity/\">Clarity</a>), and there is now a wealth of components that are readily available. Making all of these components accessible to designers will empower them to work from a single source of truth with their developers. This will greatly help improve consistency and quality as a product or company scales.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"2b80\">A day in the life of the prototyping tool</h3>\n<p>&nbsp;</p>\n<p id=\"4fdc\">Imagine Dan the designer has a prototype where he has used a table component across 50 different screens. After getting user feedback on the design, Dan decides he wants to allow users to optionally hide columns in a table. Dan talks to Emma the engineer who is able to add the hide column feature to the component. Once Emma pushes her update, Dan opens his project and sees that the new feature is working in the table component across all 50 of his screens!</p>\n<p>&nbsp;</p>\n<p id=\"a752\">After Dan has finished his design, he sends a link to Stacey the stakeholder. She opens a preview of the prototype and clicks through each stage of the workflow. Because the prototype is built with real components and real data, she is able to get a very good sense of what the final outcome will be and gives an enthusiastic approval. Emma opens Dan&rsquo;s project and is able to export an Angular template for each page in the prototype to get a jump-start on the front-end work that will be needed.</p>\n<figure id=\"fc70\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*tumO5lDKtTBU_i2Eh0imTQ.gif\" data-width=\"800\" data-height=\"450\" data-action=\"zoom\" data-action-value=\"1*tumO5lDKtTBU_i2Eh0imTQ.gif\" data-scroll=\"native\"><canvas width=\"75\" height=\"41\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*tumO5lDKtTBU_i2Eh0imTQ.gif\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*tumO5lDKtTBU_i2Eh0imTQ.gif\" /></div>\n</div>\n<figcaption>Use spreadsheets to quickly populate your components with real&nbsp;data.<br /><br /></figcaption>\n</figure>\n<h3 id=\"4e8d\">Let&rsquo;s make it better, together.</h3>\n<p>&nbsp;</p>\n<p id=\"0f0b\">We aren&rsquo;t ready to share the tool yet, but we would love to gather your thoughts on the usefulness of this idea. If you have a few minutes, please fill out&nbsp;<a href=\"https://goo.gl/forms/I7M9N5qkYFuXytXF2\" target=\"_blank\" rel=\"noopener\" data-href=\"https://goo.gl/forms/I7M9N5qkYFuXytXF2\">this survey</a>, so we can improve it.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"47db\">Join our growing&nbsp;team!</h3>\n<p>&nbsp;</p>\n<p id=\"66b8\">This is just the beginning and our team is growing quickly! We are hiring talented engineers to make a big impact on the lives of design system creators and users. If you are looking for a challenge and want to help us make this a reality, we would love to talk with you!&nbsp;<a href=\"https://careers.google.com/jobs#!t=jo&amp;jid=/google/ux-engineer-front-end-google-seattle-parkview-601-n-34th-st-3952380039&amp;\" target=\"_blank\" rel=\"noopener\" data-href=\"https://careers.google.com/jobs#!t=jo&amp;jid=/google/ux-engineer-front-end-google-seattle-parkview-601-n-34th-st-3952380039&amp;\">Join our team!</a></p>",
      "tags": [
        {
          "name": "angular"
        }
      ],
      "category": "Announcement",
      "subCategory": "Creating APIs",
      "allowComments": true
    },
    {
      "id": 2,
      "title": "API Guidelines",
      "author": "Derek Carter",
      "publicationDate": "2018-06-20T04:00:00.000Z",
      "summary": "The guide is to all things API related for API Development teams. It's primary target audience: governance team, architects, designers, developers. It provides details on API implementation, security, code samples, design guidelines, and best practices for various development platforms.",
      "content": "<h1>API Guidelines (Draft)</h1>\n<h2>Introduction</h2>\n<p>The guide is to all things API related for API Development teams. It's primary target audience: governance team, architects, designers, developers. It provides details on API implementation, security, code samples, design guidelines, and best practices for various development platforms.</p>\n<article>\n<div><nav role=\"navigation\">\n<h2>&nbsp;</h2>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#one\">API Principles</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#two\">API Gorvernance</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#three\">API-First Design</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#four\">Using an API Gateway</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#five\">API Versioning Guidelines</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#six\">Content Negotiation</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#seven\">API Lifecycle Management</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#eight\">Managing API Release Though Dev Portal</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#nine\">Security</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#ten\">API Resource Naming</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#eleven\">URL Syntax</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twelve\">Consistent HTTP Verbs Implementation</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#thirteen\">Partial Response and Pagination</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#fourteen\">Discover the Data</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#fifteen\">Common Headers</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#sixteen\">ApiKey and PearsonSSOSession</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#seventeen\">Robustness principle</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#eighteen\">API Health Route</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#nineteen\">Correlation-Id</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twenty\">Mandatory Swagger</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twentyone\">Appendix A: Integrate with Bitesize</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twentytwo\">Appendix B: Tooling</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twentythree\">Appendix C: References</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twentyfour\">Appendix D: All Must-have Recommendations</a></li>\n</ol>\n<p>&nbsp;</p>\n</nav>\n<p>&nbsp;</p>\n<h1 id=\"one\">API Principles</h1>\n<p>API as a Product</p>\n<p>Pearson is is transforming to a digital company in Education business comprising a rich set of products following a Software as a Platform (SaaP) model for our business partners. As a company we want to deliver products to our (internal and external) customers which can be consumed like a service.</p>\n<p>Platform products provide their functionality via (public) APIs; hence, the design of our APIs should be based on the API as a Product principle:</p>\n<ul>\n<li>Treat your API as product and understand the needs of its customers</li>\n<li>Take ownership and advocate for the customer and continuous improvement</li>\n<li>Emphasize easy understanding, discovery and usage of APIs; design APIs irresistible for client engineers</li>\n<li>Actively improve and maintain API consistency over the long term</li>\n<li>Make use of customer feedback and provide service level support</li>\n</ul>\n<p>RESTful API as a Product makes the difference between enterprise integration business and agile, innovative product service business built on a platform of APIs.</p>\n<p>API as a Product is closely related to our API-First principle (see API-First chapter) which is more focused on how we engineer high quality APIs.</p>\n<p>RESTful API Design</p>\n<p>Comparing SOA web service interfacing style of SOAP vs. REST, the former tend to be centered around operations that are usually use-case specific and specialized. In contrast, REST is centered around business (data) entities exposed as resources that are identified via URIs and can be manipulated via standardized CRUD-like methods using different representations, self-descriptive messages and hypermedia. RESTful APIs tend to be less use-case specific and comes with less rigid client / server coupling and are more suitable as a platform interface being open for diverse client applications.</p>\n<ul>\n<li>\n<p>We prefer REST-based APIs with JSON payloads</p>\n</li>\n<li>\n<p>We prefer systems to be truly RESTful</p>\n</li>\n</ul>\n<h1 id=\"two\">API Gorvernance</h1>\n<p>What is API Governance?</p>\n<p>API Governance is a technical business driver that allows our API platform to encure on&nbsp;Security,&nbsp;Quality, and deliver&nbsp;Features.</p>\n<p>API Gorvernance is an very important part of API Management.</p>\n<p>Some people view \"Gorvernance\" as a heavy process restriction. It isn't. It is a functional practices that allows a policy driven approach to enforcement, not just runtime, but throughout the design and development process. It is the single point to manage policy and enformancement.</p>\n<p>Previously there are various Pearson API development program defines a collection of policies and they collecively becomes the base of Pearson's API Gorvernance policy:</p>\n<p><a href=\"https://neo.pearson.com/groups/api-services/projects/api-governance\">API Gorvernance</a></p>\n<p><a href=\"https://neo.pearson.com/groups/grid/blog\">GRID API Gound Rules</a></p>\n<p>The new API Gorvernance is based on previous&nbsp;<a href=\"https://neo.pearson.com/groups/api-services/projects/api-governance\">API Gorvernance</a>&nbsp;with an update requiring all APIs are being versioned from the start. The trick is to strike the right balance.&nbsp;Self-service and Automation&nbsp;is the key to make gorvernance processes workable.&nbsp;Scanning tool&nbsp;can be utilized to ensure adhering to API Gorvernance policies.</p>\n<p>Here are a list of API Gorernance in forms of actionable Policies:</p>\n<ol>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#nine\">All API Requests Must be secured with HTTPS; All Traffic \"In Transit\" Must Be Encrypted (ala HTTPS)</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#nine\">API request Must be properly authenticated and authorized</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twelve\">APIs Must Use the Most Obvious and Consistent Verb Implementation</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#eighteen\">All APIs Must Have a Health Route at a Known Location</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#five\">All APIs Must Include Version Number in the URL or in Accept Header</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#nineteen\">Systems Must Support Correlation Id Usage</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#twenty\">Teams Must Publish OpenAPI (Swagger) Documentation Describing their API at a Known Location; APIs OpenAPI (Swagger) Documentation and other supporting documentation must be published on the Pearson Developers Portal</a></li>\n</ol>\n<h1 id=\"three\">API-First Design</h1>\n<p>When creating an API with accompanying Swagger documentation, two general paths can be taken:</p>\n<ul>\n<li>Code First: Implement the API --&gt; add Swagger annotations--&gt; generate the UI and clients from the annotations. This is bottom-up approach.</li>\n<li>API First: Design the API spec in Swagger YAML or JSON --&gt; generate the UI, clients, and server stubs from the spec --&gt; implement the server stubs. This is top-down approach.</li>\n</ul>\n<p>The latest trend is &ldquo;API First&rdquo; as one of key engineering principles. Microservices development begins with API definition outside the code and ideally involves ample peer-review feedback to achieve high-quality APIs.</p>\n<p>API-First API Design method utilizes agile approach for web apps development. The workflow is as follows:</p>\n<ol>\n<li>A developer picks a single, isolated feature to develop</li>\n<li>The developer writes the API description</li>\n<li>The API description is a subject to review by other devs (and possibly the client)</li>\n<li>When the API description is agreed to be done, the dev implements the feature.</li>\n</ol>\n<p>Benefits Of Using API-First Approach</p>\n<p>Using API-first method will boost your efficiency in developing web apps. Here are the pros:</p>\n<p>API Consumer Centric:</p>\n<p>An API specification is one of the most important parts of a web service. You may want to consider keeping the contract definition separate from the implementation because it will allow you to:</p>\n<ul>\n<li>Deliver the interface to customers faster (and get feedback sooner)</li>\n<li>Keep your implementation private while still clearly communicating to customers what the service contract is</li>\n<li>Describe APIs in a programming language-agnostic way to allow the use of different technologies for implementation</li>\n<li>Work on SDKs, API documentation and clients in parallel to implementation</li>\n</ul>\n<p>There are a few popular domain-specific languages that can be used for describing the contract of your service. At Pearson, we recommend to use OpenAPI (previously called Swagger), and keep all Swagger files in a GitHub repository called &ldquo;api-spec&rdquo;. It contains multiple yaml files that describe different parts of the API - both reusable elements and service-specific endpoint and resource definitions.</p>\n<p>Better Team Communication:</p>\n<p>The API-first approach also enhances your communication with the team. First of all, an API design draft serves as a nice description of the desired functionality. Bear in mind that programming in general is a process of transforming short, but abstract and unclear system specs (in a natural language) to very verbose, but clear and exact system specs (in a programming language) and having API design as another intermediate step helps a lot.</p>\n<p>Publish your API design to your team and ask for a review. Spotting badly designed architecture or business logic is easier this way than contemplating unclear user stories in your issue tracker. If your team approves your API, you will know that everyone has a similar understanding of how the system should work.</p>\n<p>Writing API design first makes it also easier to estimate the work that needs to be done. When the API design is in place one can count the number of required endpoints, url params, or anything &ndash; it&rsquo;s still better than estimating the story based just on a natural description. Moreover, the API designs are usually easy to review and tag as &ldquo;doable&rdquo; or &ldquo;not doable&rdquo;, so in case you write an API doc which is impossible to implement, someone should spot it soon.</p>\n<p>If the front-end and back-end tasks are separated in your team, preparing the API doc first will also make it possible to parallelize the works. Having the contract written decouples server-side development from the web app.</p>\n<p>To give you a taste of OpenAPI(Swagger) here&rsquo;s how a combined yaml file could look like:</p>\n<pre>openapi: 2.0.0\ninfo:\n  title: Sample API\n  version: '1.0'\nservers:\n  - url: https://api.example.com/v1\npaths:\n  /hello:\n    get:\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n</pre>\n<p>Benefits Of Using Code-First Approach</p>\n<p>But while design first may be ideal, many teams are still following a code first approach, where they are using some combination of open source tooling to generate Swagger files from existing APIs &mdash; either in runtime or build time. The decision to follow a &ldquo;code first&rdquo; approach to Swagger is that it can be implemented quicker than moving to a design first approach. The fact that automation is easier in the code-first approach helps strengthen this case, with a lot of libraries supporting scaffolding server code, functional testing, and deployment automation.</p>\n<p>An important added advantage of Code-First approach is that the code and documentation are never out of sync, as long as the documentation is always re-generated (and updated on the web site or wherever) whenever the code changes.</p>\n<p>Should my team do API-First or Code-First?</p>\n<p>Starting with the spec allows architects and technical PMs to set an example when conceptualizing a new set of interfaces and then iterate with their API consumer customers. The very idea of iterative design demands that rapid experimentation is achieved via as little code as possible.</p>\n<p>On the flip side, for established domains, the developers can implement faster if they just start coding. The truth is in either case it is a good practice to document the API contracts right from the start even if you plan on iterating.</p>\n<p>Here is an article that might give your team some guideline:&nbsp;<a href=\"https://test-pearson.devportal.apigee.io/https://www.linkedin.com/pulse/design-first-code-whats-best-approach-api-development-vasudevan\">https://www.linkedin.com/pulse/design-first-code-whats-best-approach-api-development-vasudevan</a></p>\n<p>If your team chooses to do API-First approach, you need a process to update your API Spec once your API interface has changed due to implementation change. And you need to have a good set of Spec testcases to make sure the implementation fully complaint with your API Spec.</p>\n<p>For example, the process of generating the API Swagger spec is executed by a simplistic CD pipeline. This generated spec is your living and evolving doc ties with your implementation. If interface has changed, you need to merge the change and update the original OpenAPI spec. Every time you merge changes to the master branch of the API specification repository, it should submit it as a pull-request towards the documentation repository so the team can review the changes and approve it.</p>\n<p>If your team chooses to do Code-First approach, there are few pitfalls you might want to be aware and avoid with the following example that uses SpringFox (a popular Spring framework component that supports Swagger doc and UI).</p>\n<p>Also, you need to establish a process internally how to make sure implementation changes doesn't result to unintended API interface change.</p>\n<p><a href=\"https://dzone.com/articles/overcoming-swagger-annotation-overload-by-switchin\">https://dzone.com/articles/overcoming-swagger-annotation-overload-by-switchin</a></p>\n<p><a href=\"http://radar.oreilly.com/2015/09/building-apis-with-swagger.html\">http://radar.oreilly.com/2015/09/building-apis-with-swagger.html</a></p>\n<p>We recommend teams, API developers and API consumers to try both &ldquo;API-First&rdquo; and \"Code-First\" approach to pick one approach you are most comfortable</p>\n<h3 id=\"100\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#100\">May:&nbsp;Follow API First Principle or Code-First Approach</a></h3>\n<h1 id=\"four\">Using an API Gateway</h1>\n<p data-lf-anchor-id=\"8fb5bdebcf7426d911cdf4437b662a73:0\">In a REST API and microservices architecture, each API/microservice can be divided into either coarse-grained or fine-frained API. Typically, microservice exposes a set of fine‑grained endpoints. This fact can impact the client-to-API or client‑to‑microservice communication.</p>\n<h2 id=\"direct-client-to-microservice-communication\">Direct client-to-microservice communication, no API Gateway</h2>\n<p>&nbsp;</p>\n<p data-lf-anchor-id=\"03e4e7216db0bfad218d9843df640421:0\">In this approach, a client app can make requests directly to some of the microservices.&nbsp;This could be good enough for a small microservice-based application, especially if the client app is a server-side web application.&nbsp;As long as your API is compliant with API Gorvernance Policy and CISO, typically you don't need to use an API Gateway like Apigee.</p>\n<p data-lf-anchor-id=\"03e4e7216db0bfad218d9843df640421:0\"><img src=\"https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/architect-microservice-container-applications/media/image12.png\" alt=\"\" data-linktype=\"relative-path\" /></p>\n<p data-lf-anchor-id=\"838575eb047335f83449d1766b524e61:0\">&nbsp;</p>\n<p data-lf-anchor-id=\"838575eb047335f83449d1766b524e61:0\">However, when you build large and complex microservice-based applications or APIs (for example, when handling dozens of microservice types), and especially when the client apps are remote mobile apps or SPA web applications, that approach faces a few issues.</p>\n<p data-lf-anchor-id=\"2f449d0dd81c20f9a146e9c3c1102078:0\">Consider the following questions when developing a large application based on microservices:</p>\n<ul data-lf-anchor-id=\"8ed8e4295ff9249b7d2f8046df266135:0\">\n<li>How can client apps minimize the number of requests to the backend and reduce chatty communication to multiple microservices?</li>\n</ul>\n<p data-lf-anchor-id=\"8dd42c215fb9fdf1174fc84f69006651:0\">Interacting with multiple microservices to build a single UI screen increases the number of roundtrips across the Internet. This increases latency and complexity on the UI side. Ideally, responses should be efficiently aggregated in the server side&mdash;this reduces latency, since multiple pieces of data come back in parallel and some UI can show data as soon as it is ready.</p>\n<ul data-lf-anchor-id=\"cf074a16543d6fa014a601a51960a689:0\">\n<li>How can you handle cross-cutting concerns such as authorization, data transformations, dynamic request dispatching and API Rate-limit?</li>\n</ul>\n<p data-lf-anchor-id=\"02adf16d403421b13147bac4476dde38:0\">Implementing security and cross-cutting concerns like security and authorization on every microservice can require significant development effort. A possible approach is to have those services within the Docker host or internal cluster, in order to restrict direct access to them from the outside, and to implement those cross-cutting concerns in a centralized place, like an API Gateway. This usage of an API Gateway prevents exposing internal concerns to external clients.&nbsp;&nbsp;</p>\n<ul data-lf-anchor-id=\"0268284c779e02b51726051cee6f6bcd:0\">\n<li>How can client apps communicate with services that use non-Internet-friendly protocols?</li>\n</ul>\n<p data-lf-anchor-id=\"0a24bc414f34a6bd53e14a7729514673:0\">Protocols used on the server side (like AMQP or binary protocols) are usually not supported in client apps. Therefore, requests must be performed through protocols like HTTP/HTTPS and translated to the other protocols afterwards. An API Gateway approach can help in this situation.</p>\n<ul data-lf-anchor-id=\"ce096189503be5bf39e795b51b3d7ead:0\">\n<li>How can you shape a fa&ccedil;ade especially made for mobile apps?</li>\n</ul>\n<p data-lf-anchor-id=\"8d4c2da9cfb935f93b8dc8474b652a7d:0\">The API of multiple microservices might not be well designed for the needs of different client applications. For instance, the needs of a mobile app might be different than the needs of a web app. For mobile apps, you might need to optimize even further so that data responses can be more efficient. You might do this by aggregating data from multiple microservices and returning a single set of data, and sometimes eliminating any data in the response that is not needed by the mobile app. And, of course, you might compress that data. Again, a fa&ccedil;ade or API in between the mobile app and the microservices can be convenient for this scenario. For mobile application, we strongly recommend to build Coarse-grained API and use an API Gateway like Apigee.</p>\n<h2 id=\"using-an-api-gateway\">Using an API Gateway</h2>\n<p>&nbsp;</p>\n<p data-lf-anchor-id=\"85c1af83c581a4fb318dd846436160f9:0\">When you design and build large or complex microservice-based applications with multiple client apps, a good approach to consider can be an API Gateway.&nbsp;This is a service that provides a single entry point for certain groups of microservices. It is similar to the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Facade_pattern\" data-linktype=\"external\">Facade pattern</a>&nbsp;from object‑oriented design, but in this case, it is part of a distributed system. The API Gateway pattern is also sometimes known as the &ldquo;backend for frontend&rdquo;&nbsp;<a href=\"http://samnewman.io/patterns/architectural/bff/\" data-linktype=\"external\">(BFF)</a>&nbsp;because you build it while thinking about the needs of the client app.</p>\n<p data-lf-anchor-id=\"8805a529d13761b511cc95d35b676829:0\">An API Gateway can fit into a microservice-based architecture as well providing benifits for API calls. It is important to highlight that you would be using a single custom API Gateway service facing multiple and different client apps. That fact can be an important risk because your API Gateway service will be growing and evolving based on many different requirements from the client apps. Eventually, it will be bloated because of those different needs and effectively it could be pretty similar to a monolithic application or monolithic service. That is why it is very much recommended to split the API Gateway in multiple services or multiple smaller API Gateways, one per form-factor type, for instance, using a light weighed API Gateway like Kong for only these microservices/APIs.</p>\n<p data-lf-anchor-id=\"d41d8cd98f00b204e9800998ecf8427e:1\"><img src=\"https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/architect-microservice-container-applications/media/image13.png\" alt=\"\" data-linktype=\"relative-path\" /></p>\n<p data-lf-anchor-id=\"8a01a5fa592474fc93c8a0c3792020a3:0\">In this example, the API Gateway like Kong, would be implemented as a custom Web API service running as a container.</p>\n<p data-lf-anchor-id=\"0d55a521d43904b131cf10d743636371:0\">Since a custom API Gateway is usually a data aggregator, you need to be careful with it. Usually it isn't a good idea to have a single API Gateway aggregating all the internal microservices of your application. If it does, it acts as a monolithic aggregator or orchestrator and violates microservice autonomy by coupling all the microservices. Therefore, the API Gateways should be segregated based on business boundaries and not act as an aggregator for the whole application.</p>\n<p data-lf-anchor-id=\"ae5925227800b4f531c398d243652221:0\">Therefore, for many medium- and large-size applications, using a custom-built API Gateway like Apigee is usually a good approach, but not as a single monolithic aggregator or unique central custom API Gateway.</p>\n<p data-lf-anchor-id=\"9f906fab4fb965bf038fe0cf630ed674:0\">This type of product acts more like a reverse proxy for ingress communication, where you can also filter the APIs from the internal microservices plus apply authorization to the published APIs in this single tier.</p>\n<p data-lf-anchor-id=\"33dd8d1f1429b5fa7b8f91465d276e6b:0\">The insights available from an API Management system help you get an understanding of how your APIs are being used and how they are performing. They do this by letting you view near real-time analytics reports and identifying trends that might impact your business. Plus, you can have logs about request and response activity for further online and offline analysis.</p>\n<p data-lf-anchor-id=\"bf496f3bd4a925f81b62894511767e39:0\">With Apigee API Management, you can secure your APIs using a key, a token, and IP whilisting. These features let you enforce flexible and fine-grained quotas and rate limits, modify the shape and behavior of your APIs using policies, and improve performance with response caching.</p>\n<h2 id=\"drawbacks-of-the-api-gateway-pattern\">Drawbacks of the API Gateway pattern</h2>\n<p>&nbsp;</p>\n<ul data-lf-anchor-id=\"9f01ad6ed71e44f931ccc8c66f2d3ce3:0\">\n<li>\n<p>The most important drawback is that when you implement an API Gateway, you are coupling that tier with the internal microservices. Coupling like this might introduce serious difficulties for your application.&nbsp;</p>\n</li>\n<li>\n<p>Using a microservices API Gateway creates an additional possible single point of failure.&nbsp;If not scaled out properly, the API Gateway can become a bottleneck.</p>\n</li>\n<li>\n<p>An API Gateway can introduce increased response time due to the additional network call. However, this extra call usually has less impact than having a client interface that is too chatty directly calling the internal microservices.</p>\n</li>\n<li>\n<p>An API Gateway requires additional development cost and future maintenance if it includes custom logic and data aggregation. Developers must update the API Gateway in order to expose each microservice&rsquo;s endpoints. Moreover, implementation changes in the internal microservices might cause code changes at the API Gateway level. However, if the API Gateway is just applying security, logging, and versioning (as when using Apigee API Management), this additional development cost might not apply.</p>\n</li>\n<li>\n<p>If the API Gateway is developed by a single team, there can be a development bottleneck. This is another reason why a better approach is to have several fined-grained API Gateways that respond to different client needs. You could also segregate the API Gateway internally into multiple areas or layers that are owned by the different teams working on the internal microservices. Consider to introduce a light weighed API Gateway like Kong.</p>\n</li>\n</ul>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<h1 id=\"five\">API Versioning Guidelines</h1>\n<p>One common problem as more and more APIs are created in a microservices architecture is that changes to the API create coordination issues between all the various clients that use the APIs. Because a client will often interact with multiple APIs, and because the APIs are managed by different teams, coordinating changes to the APIs between the clients as well as all the other API teams can often be challenging. One team will update an API, but a client is not yet ready to use the updated API, or in many cases multiple APIs need to be updated at once in order for a client to use them effectively.</p>\n<h2>Versioning Options</h2>\n<p>How to version an API has been a long and thoroughly discussed topic in the last several years regardless of protocol or approach. There are various versioning camps:</p>\n<ol>\n<li>URL: You simply include the API version into the URL, for example:&nbsp;https://api.client.com/air/v1/flights/123</li>\n<li>Custom request header: You use the same URL as before but add a header such as&nbsp;&ldquo;api-version: 2&rdquo;</li>\n<li>Versioning in parameters as&nbsp;/api/resource?version=1</li>\n<li>Accept header: You modify the accept header to specify the API version, plus using MIME type to specify custom resource via Content Negotiation for a specific resource version, for example:&nbsp;&ldquo;Accept: application/xml; version=1.0&rdquo;</li>\n</ol>\n<p>Historically versioning was accomplished via a version number in the URI itself, with clients indicating which version of a resource they desired directly in the URI they requested. In fact, many of the &ldquo;big boys&rdquo; such as Twitter, Yammer, Facebook, Google, etc. frequently utilize version numbers in their URIs.</p>\n<p>However within Pearson, over the years there are differences recommending the version strategy. For example, GRID program have a number of APIs and they support Versioning via Content Negotiation.&nbsp;<a href=\"https://neo.pearson.com/docs/DOC-168337\">GRID Recommendations</a></p>\n<p>Versioning is an open topic in the industry. There are two things that in design time may need versioning</p>\n<ul>\n<li>API</li>\n<li>Resource</li>\n</ul>\n<h2>GLP Guidelines for Versioning</h2>\n<p>As part of the discussions with GLP on building out the Global Learning Platform, GLP has given us their recommendations for how to perform versioning:</p>\n<blockquote>\n<ul>\n<li>An API/Resource URI should ideally be immutable or at least have a very long life (multiple years). In interest of extensibility though it is important that URIs account for possible changes by following the following versioning scheme:</li>\n<li>All APIs must include a version number.</li>\n<li>The version number in the URI is for the API, not for the Resource.</li>\n<li>Version number should be a simple ordinal number, with a prefix of &ldquo;v&rdquo;, and format as &ldquo;v[N]&rdquo;. E.g. v1, v2.</li>\n<li>Version number should be the first element in the URL so that it has highest scope.</li>\n<li>Example:</li>\n</ul>\n<pre>https://api.client.com/air/v1/flights/123*\nhttps://api.client.com/air/v2/flights/123\n</pre>\n</blockquote>\n<p>GL Point of View:</p>\n<blockquote>\n<ul>\n<li>\n<p>In the Open API or in a Public API, the a API should be simple a straightforward for developers. Having said that for the exposed APIs we recommend keep it simple and use only one \"Version Reference\", the URI versioning approach (widely used by most popular APIs). In the industry we never have seen two levels of versioning. Having two levels of versioning (API and Resource) is confusing for developers and introducing breaking changes in either API or Resource, the developers will need to change their code anyway.</p>\n</li>\n<li>\n<p>There is a topic related with versioning which is how big the API is/should be (REST APIs Design Guidelines/Design Principles). Having a big API (many resources) the probability to introduce breaking changes are higher that small API. The mayor version should be supported for several years and you should not change the API version very frequently (for example, you should not change 10 times the version of the API within a year), keep the API stable with stable contract is key for API adoption.</p>\n</li>\n<li>\n<p>Resource versioning has a correspondence with the data dictionary which will evolve. From governance standpoints Client may want to keep track of resource and API version but that complexity should not need to be exposed to the clients. When Client' API developers design an API will use the resources version from the data dictionary to create an API with a the first version (v1). If the resource evolves introducing a breaking change, then the API should be re- versioned (v2).</p>\n</li>\n</ul>\n</blockquote>\n<p>Additionally, GLP also recommends against using Content Negotiation for Versioning. For example: application/vnd.client.com.v2.flight+json</p>\n<p>The most common solution to this is to version the APIs. This means putting in version numbers within the web service endpoints, usually in the URL itself, so that a client can continue calling an older version of an API before upgrading when it is ready. This means that multiple versions of the API need to be maintained and deployed, so API development teams need to take on this additional work in order for versioning to be successful.</p>\n<p>Our main view is that we should use API versioning for changes in data access functionality and use Canonical resource path to represent certain resources and these resources doesn&rsquo;t need to be specifically versioned.</p>\n<p>We recommend to adapt GLP&rsquo;s recommendation and include version number in the URL.</p>\n<h3 id=\"101\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#101\">Must:&nbsp;Include version number in the URL</a></h3>\n<p>There are still some concerns whether this approach applies to all APIs. We recommendation APIs include API version number in accept header when it makes more sense</p>\n<h3 id=\"102\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#102\">Must:&nbsp;API version number in accept header</a></h3>\n<h2>Versioning at the top level vs. entity level</h2>\n<p>Examples of versioning an API:</p>\n<pre>Example:\n\t/v1/work/{UUID}\n\t/v1/manifestation/{UUID}\n\t/v2/work/{UUID}\n\t/v2/manifestation/{UUID}\n</pre>\n<p>The version number can also be placed after the entity, enabling entity APIs to be versioned separately:</p>\n<pre>Example:\n\t/work/v1/{UUID}\n\t/manifestation/v2/{UUID}\n</pre>\n<p>However, since Pearson&rsquo;s current API structure is fairly flat, this distinction does not have as many consequences as for other APIs.</p>\n<p>We recommend do not nest the resource hierarchy more than 3 level deep and include versions at the top level:</p>\n<pre>Example:\n\t/v1/work/{UUID}\n\t/v1/manifestation/{UUID}\n</pre>\n<h3 id=\"103\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#103\">Must:&nbsp;Include versions at the top level</a></h3>\n<h2>Simple Ordinal Number vs. Major.Minor</h2>\n<p>The version need not be numeric, nor specified using the &ldquo;v[N]&rdquo; syntax. Alternatives include dates, project names, seasons or other identifiers that are meaningful enough to the team producing the APIs and flexible enough to change as the versions change.</p>\n<p>Option 1: Version number should be a simple ordinal number, with a prefix of &ldquo;v&rdquo;, and format as &ldquo;v[N]&rdquo;. E.g. v1, v2.</p>\n<p>The Advantage of using a simple ordinal number like v1, v2 is its simplicity. This is recommended by GLP&rsquo;s Playbook, as well as recommended by API Management Vendor Apigee: Use a simple ordinal number - v1, v2, and so on. Don't use the dot notation like v1.2 because it implies a granularity of versioning that doesn't work well with APIs--it's an interface not an implementation. Apigee's Recommendation</p>\n<p>The implication of this versioning scheme is version upgrade occurs only when there is a breaking change (v1 -&gt; v2 -&gt; v3 etc). Any minor changes, bug fixes, performance improvement that results no contract breaking changes won&rsquo;t reflect in the API versioning semantics. What if one API consumer is keen to move on to get a performance improvement from an API but one other team isn&rsquo;t quite ready?</p>\n<p>It can be helpful to track the minor versions of APIs when changes are made to support customers who may be receiving cached versions of data or may be experiencing other API issues.</p>\n<p>If the team introduces lots of breaking changes, the version number can gets quite high, it signals the API changes more often it should be, the team probably should consider the design alternative.</p>\n<p>Option 2: v2.0 major.minor notation; major indicates breaking change while minor indicates incremental non-breaking chance.</p>\n<p>The advantage for using major.minor notation is to allow small non-contract breaking change being called out to the API consumer. We anticipate that in a in a relative early stages of API lifecycle there are potentially more changes being introduced so API can upgrade in a pace more frequent (v1.0, v1.1, v1.2, v1.3 etc) than when API reaches a mature stage (v2.0 will be in production stable for a long time).</p>\n<p>The disadvantage is it adds the maintenance complexity and API team will have to keep track the difference between all the minor changes.</p>\n<p>We recommend to Use v[major.minor] notation, for example, v1.0, v1.1</p>\n<h3 id=\"104\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#104\">Must:Use v[major.minor] notation, for example, v1.0, v1.1</a></h3>\n<h2>Multiple Version Deployment Options</h2>\n<p>There are several options for implementing multiple versions. Below I list a few. I recommend that option 1 be the implementation choice at Pearson.</p>\n<p>Option 1: Single API deployment containing multiple versions</p>\n<p>There are multiple ways to implementing versioning. One approach involves a single deployment (WAR, NodeJS package, etc) that contains multiple versions of the API. For example:</p>\n<p>api.pearson.com: Available Endpoints:</p>\n<pre>/v1/work/{UUID}\n/v2/work/{UUID}\nEtc&hellip;.\n</pre>\n<p>Advantages:</p>\n<ul>\n<li>Single deployment for all versions simplifies infrastructure cost and maintenance</li>\n<li>Clients do not need to change hostnames based on which version they are connecting to. In fact, a client could call multiple versions of the API, if different parts of the client require different versions.</li>\n<li>Bug fixes can be shared across multiple versions, depending on how much code reuse there is between versions of the API.</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Same codebase must be maintained for multiple versions. In particular, this means that EVERY RELEASE must regression test against ALL supported versions of the API. Unit/Integration tests must be maintained for each version. Note that there will be policies for how many previous versions will be supported, see below. Not every previous version will be supported indefinitely.</li>\n</ul>\n<p>Option 2: Multiple Deployments, Single Version per Deployment</p>\n<p>For option 2, each version of an API is deployed as a separate microservice instance (or instances). So version 1 of an API might have the DNS name &ldquo;mds.v1.pearson.com&rdquo;, and version 2 of the API might have the DNS name &ldquo;mds.v2.pearson.com&rdquo;. Once an API is updated to a new version, the previous versions are effectively left alone in their deployed state and never re-deployed (except for some critical bug fixes).</p>\n<p>api.v1.pearson.com: Available Endpoints:</p>\n<pre>/v1/work/{UUID}\n</pre>\n<p>api.v2.pearson.com: Available Endpoints:</p>\n<pre>/v2/work/{UUID}\n</pre>\n<p>Advantages:</p>\n<ul>\n<li>Less need to maintain multiple versions of the code base. Unless a critical bug is found in older version of the code, all new development happens on the new code base. No need to test older versions of the API on release of newer versions.</li>\n<li>Versions of the application are physically isolated from each other. There is very little chance that a change introduced by a new version of an API can affect how an older version of the API operates. Also, if there is a hardware failure, it will only affect one version of the API, not all versions.</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>\n<p>Infrastructure costs and maintenance increase with each deployed version. New hardware must be provisioned and configured, and older versions need to be monitored and maintained until they are retired. Infrastructure becomes very tightly coupled with the versioning plans of the development teams.</p>\n</li>\n<li>\n<p>Older unit/integration tests still require some maintenance, as critical bug fixes that are applied to older versions of the API still need to run properly. So this need is not eliminated entirely.</p>\n</li>\n<li>\n<p>Critical bugs that are found need to be fixed in all supported versions, and all supported versions need to be re-deployed.*</p>\n</li>\n<li>\n<p>Clients that need to access multiple versions of an API will need to maintain multiple hostnames*</p>\n</li>\n</ul>\n<p>One consideration to both options is to consider in the future to Allow Canary practice. The basic idea of a canary is that you run new code on a small subset of your production infrastructure, for example, 1% of prod traffic, and you see how the new code (the canary) compares to the old code (the baseline). When each version of an API is deployed as a separate microservice instance, it allows easier rolling out a specific version of API separately in small production traffic and gradually roll out to all production traffic incrementally.</p>\n<p>We recommend a single deployment (WAR, NodeJS package, etc) that contains multiple versions of the API.</p>\n<h3 id=\"105\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#105\">Must:Single deployment that contains multiple versions</a></h3>\n<h2>When To Increment the Version of an API</h2>\n<p>The decision on when to create a new version of an API is often the most difficult one for teams to grasp. Often this comes down to the discretion of the individual teams that own the APIs, however there are several guidelines that can be used to help teams make these decisions. In general, the rule of thumb is if a client's existing code will break, a new version is required.</p>\n<p>Changes to resource that are considered breaking:</p>\n<ul>\n<li>The URL for the endpoint is changed. For example, the name of an entity is changed from \"work\" to \"workproduct\". Or a new sub-element is added to the URL, so instead of \"/work/{UUID}\" now the call is \"/work/id/{UUID}\"</li>\n<li>The parameters that need to be sent in by the client have been renamed. For example, a PUT on \"/work/{UUID}/status\" used to require a field called \"status\", but now the field that is required is called \"state\".</li>\n<li>There are new required parameters for the API. For example, a PUT on \"/work\" used to require only four fields, but now an extra field is required.</li>\n<li>The task that the API does has fundamentally changed. For example, a PUT on \"/work\" used to overwrite any existing document, but now it creates a new version and marks the old one \"inactive\". Existing clients might not be expecting this type of behavior. This is usually a judgment call, as an API can change the scope of what it does without necessarily requiring a new version. For example, it's probably OK if a PUT operation is modified so that it also sends a copy of the new document to a cache, or stores a backup copy somewhere. The guiding principle is whether or not clients would be surprised by the change to the scope of the call.</li>\n<li>The document returned by the API have changed. For example, a GET to \"/work\" used to return a document with audit fields included, but now those audit fields are being removed or renamed or moved to a different part of the document.</li>\n<li>The HTTP codes returned by the API have changed. For example, a GET to \"/work/{UUID}\" for a non-existent entity used to return 404, but now it returns a 409 under certain circumstances (entity was removed, etc). This happens especially as additional validations are added to an API resulting in more 4XX codes being returned to clients that might not be ready to handle them.</li>\n<li>Changing a property name (ie. &ldquo;name&rdquo; to &ldquo;firstName&rdquo;)</li>\n<li>Removal of property</li>\n<li>Changing property data type (numeric to string, boolean to bit/numeric, string to datetime, etc.)</li>\n<li>Validation rule change</li>\n<li>In Atom style links, modifying the &ldquo;rel&rdquo; value.</li>\n<li>A required resource is being introduced into an existing workflow</li>\n</ul>\n<p>There are also situations when a version of an API doesn't necessarily have to be incremented. A judgment call often needs to be made in these situations.</p>\n<p>Changes to resource that are considered non-breaking:</p>\n<ul>\n<li>Adding a new endpoint to an API. In general, this does not break backwards compatibility with clients, so there is no need to increment the version number. However, there may be other reasons that a new version is desirable here, for example in rolling out a whole new paradigm of interacting with the API, or an entire new set of functionality. Version numbers can help alert clients that new functionality is available in an API. But strictly speaking, the addition of a new endpoint does not in and of itself require a version increment.</li>\n<li>Adding more non-required parameters to an API. If additional parameters are added to an API, this won't break backwards-compatibility and probably does not require a new version of the API.</li>\n<li>New properties added</li>\n<li>New/additional &ldquo;link&rdquo; to other resources</li>\n<li>New content-type supported formats</li>\n<li>New content-language supported formats</li>\n<li>Casing is irrelevant as both the API producer and consumer should handle varied casing</li>\n</ul>\n<p>In general, as long as the impacts of a change to clients is kept in mind, the decision on whether or not to increment the version of an API is often straightforward.</p>\n<h2>End Of Life For a Version</h2>\n<p>Generally API&rsquo;s developement to deployment process follows like this:</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"file-49\">\n<h2><a href=\"https://test-pearson.devportal.apigee.io/file/49\">created-to-retired.png</a></h2>\n<div><img src=\"https://code.pearson.com/system/files/created-to-retired_0_0.png\" alt=\"\" width=\"1102\" height=\"872\" data-delta=\"1\" /></div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>Older versions of an API cannot be supported indefinitely by development teams. It is normal to publish an end-of-life date on an older API. Some possibilities include a time component (one year after it is supplanted by a new version), or a maximum number of previous versions (only supporting three versions of an API at a time).</p>\n<h2>How many versions should you maintain?</h2>\n<p>A popular and practical approach is +N model where only the last N versions of the API are maintained. Since maintaining many versions becomes cumbersome, complex, error prone, and costly you should support no more than N versions for any given resource.</p>\n<p>We recommend API team to maintain at least one version and at most N version back. Each API will advise its consumers the guidance on how many back versions to maintain.</p>\n<h3 id=\"106\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#106\">Must:&nbsp;Maintain at least one version and at most N version back</a></h3>\n<h2>For how long should you maintain a version?</h2>\n<p>There are several approaches on this. For example, Facebook API has the scheme where each version is guaranteed to operate for at least two years. A version will no longer be usable two years after the date that the subsequent version is released.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"file-50\">\n<h2><a href=\"https://test-pearson.devportal.apigee.io/file/50\">APIVersionDuration.png</a></h2>\n<div><img src=\"https://code.pearson.com/system/files/APIVersionDuration.png\" alt=\"\" width=\"1304\" height=\"382\" data-delta=\"2\" /></div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>Give developers at least one cycle to react before obsoleting a version. Sometimes that's 6 months; sometimes it's 2 years. It will depend on your developers' platforms. For example, mobile apps take longer to rev than web apps.</p>\n<p>We recommend that a time component is defined, so that clients have a date that they know in advance for when an API will stop being supported, something around 12 months.</p>\n<h2>What if clients don&rsquo;t specify a version or specify an non-exist version?</h2>\n<p>By default, it gets the oldest version! This is to prevent accidently breaking change being introduced and API consumers are not fully aware of or be prepared to update.</p>\n<p>We recommend to always make specifying Versions explicitly when making calls as a Best Practice.</p>\n<h3 id=\"107\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#107\">Must:&nbsp;Version explicitly and mandatory</a></h3>\n<h2>How to handle Unsupported or Obsolete Version?</h2>\n<p>When an unsupported version number or an obsolete version is requested, including a resource version that has gone through the API deprecation lifecycle, the API should return an error response with 406 (Not Acceptable) HTTP status code. In addition, the API could return a response body with Content-Type: application/json that contains a JSON array of supported content types for that endpoint.</p>\n<p>Request</p>\n<p>For example:</p>\n<pre>GET http://api.client.com/users/12345\nContent-Type: application/json; version=999\n\nResponse\n\nHTTP/1.1 406 NOT ACCEPTABLE\nContent-Type: application/json\nWarning: 299 - \"Deprecated API\"\n[&ldquo;application/json; version=1&rdquo;, &ldquo;application/json; version=2&rdquo;, &ldquo;application/xml; version=1&rdquo;, &ldquo;application/xml; version=2&rdquo;]\n</pre>\n<p>There is a distinction between an API being deprecated vs being retired. A deprecated API is still deployed into API Gateway (available at runtime to existing users), but not visible to subscribers. A retired API will be removed from API Gateway.</p>\n<h3 id=\"108\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#108\">Must:&nbsp;Return HTTP 406 for Unsupported or Obsolete Version</a></h3>\n<h1 id=\"six\">Content Negotiation</h1>\n<p>The use of content negotiation with custom MIME types allows for finer grained versioning at the resource level without the need to create a plethora of new endpoints. New versions must be communicated to developers through existing channels &ndash; email, developer blogs, etc. When a content version is no longer supported, the body of the HTTP error should include a list of supported content types.</p>\n<p>Example:</p>\n<p>A GET request receives a 200 OK response with a Content-Location pointing to a data.pearson.com document URL (in this instance the JSON-LD representation URL).</p>\n<p>For example, using content negotiation:</p>\n<pre>GET /work/12345\nAccept: application/ld+json\nPrefer: return=representation\n\nHTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Location: https://data.pearson.com/work/12345/metadata.jsonld\n{\n\t\t\t...\n}\n</pre>\n<p>The GLP Playbook&rsquo;s recommends:</p>\n<blockquote>\n<p>Content Negotiation in REST</p>\n<p>The client should use the \"Accept\" header to specify the format required. The server will return the first format available from the Accept header. We recommend using only one resource representation type. That representation could be either a generic \"application/json\" or a custom type \"vnd.client.com+json\" as a specification of the generic/default type. The vnd.client.com+json structure as a generic type is described in 06 - Resource Specification. As discussed in the Versioning prescription we do not recommend using Content Negotiation for versioning:</p>\n<p>We do not recommend using Content Negotiation to specify per resource representation like vnd.client.com.flight+json, this increases the API development and maintainability too and also the developers who consume the API need to deal with this strong typed API.</p>\n<p>Pro of using custom type:</p>\n<ul>\n<li>Client could parse all the responses in the same way making the marshaling and unmarshaling process more efficient</li>\n<li>Client could provide as a tool the parser in a kind of light version of a SDK.</li>\n</ul>\n<p>Cons of using custom type:</p>\n<ul>\n<li>When the API version changes, the representation could change and then versioning the contentment type is necessary increasing complexity. A way to avoid this is having the \"SDK\" versioned but you don't know if all the consumers are using the SDK.</li>\n<li>Using application/json is more flexible but the developer needs to parse the json adding some overhead in the dev process.</li>\n</ul>\n</blockquote>\n<p>Essentially, GLP opinions are:</p>\n<ol>\n<li>Content Negotiation is good,</li>\n<li>Use only one resource representation type, possibly \"application/json\" or a custom type \"vnd.client.com+json\".</li>\n<li>Do not use Content Negotiation to specify per resource representation like vnd.client.com.flight+json,</li>\n<li>Do not use Content Negotiation for versioning.</li>\n</ol>\n<p>Our view is that GLP opinion 2 and 3 is conflicting with GLP opinion 1.</p>\n<p>We need to carefully review GLP&rsquo;s recommendation together and balance out Content API&rsquo;s needs to make an informed decision for our current usage with Content Negotiation.</p>\n<ul>\n<li>\n<p>Simply specifying the one resource representation type like XML as a return format, however, doesn&rsquo;t really do much to help the client figure out what the XML contains. The XML spec overcomes this by adding a DTD element in the response body that links to a document that helps the client interpret the response. Other response types like JSON do not currently have a well- specified way to do this and rely, instead, on either the Accepts and Content-Type headers or in using a file extension to allow the client developer to specify the preferred response format.</p>\n</li>\n<li>\n<p>Using the content headers allows for more fine-grained control over the negotiation process, allowing the client to specify not just the high-level format &ndash; i.e. JSON or XML &ndash; but the actual profile that governs the layout, including the version.</p>\n</li>\n<li>\n<p>This specification may follow an existing or emerging standard, such as can be found on Schema.org, or may be specified by the API producer. This allows for a great deal of flexibility for the API producer to define responses that best match the structure and needs of their API.</p>\n</li>\n<li>\n<p>For example, an e-commerce API provider may choose to create their own profile for a product in their catalog which best mirrors how a product is represented elsewhere in their application. This profile will likely be used where a product is referenced in a system, so the application developers should standardize internally on a specific profile, providing it a custom MIME type:</p>\n</li>\n<li>\n<p>application/json;vnd.example.products.json+v1</p>\n</li>\n<li>\n<p>Note the use both of the representational format (&ldquo;json&rdquo;) and the version (&ldquo;v1&rdquo;). This form of content negotiation allows versioning at the individual resource level, which can help keep the codebase that drives the application clean and consistent while allowing for increased flexibility to iterate. If the client application sets the Accept header to &ldquo;/&rdquo; or leaves it out completely, the API may return its preferred representational format, which, in the above case, will likely be the most recent version of the custom Product representation.</p>\n</li>\n</ul>\n<p>When the content type being negotiated is not available, the API should return response:</p>\n<p>Response</p>\n<pre>HTTP/1.1 406 NOT ACCEPTABLE\nContent-Type: application/json\n\nWarning: 299 - \"Content Type Unmatched\"\n[Accept Format List]\n[&ldquo;application/json&rdquo;, &ldquo;application/vnd.pearson.v1p2.qti+xml&rdquo;, &ldquo;application/xml&rdquo;, \n&ldquo;application/vnd.pearson.v1.brix+json&rdquo;, &ldquo;application/vnd.pearson.v1.cite.xhtml+xml&rdquo; ]\n</pre>\n<h1 id=\"seven\">API Lifecycle Management</h1>\n<p>What is API Lifecycle Management?</p>\n<p>API Lifecycle Management tracks the interface&rsquo;s lifecycle, is part of API Governance.</p>\n<p>The details will vary, but this basically describes the promotion process (lifecycle) of an API version from initial design, to implement, to management of lowest-level development environment to production, decommission of an API</p>\n<p>At Pearson, we define API ifecycle into: Design, Implementation, and Management.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"file-51\">\n<h2><a href=\"https://test-pearson.devportal.apigee.io/file/51\">api-lifecycle.png</a></h2>\n<div><img src=\"https://code.pearson.com/system/files/api-lifecycle.png\" alt=\"\" width=\"1182\" height=\"784\" data-delta=\"3\" /></div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>Design:</p>\n<ul>\n<li>Contract-first Strategy</li>\n<li>Start by designing the API using the&nbsp;<a href=\"https://github.com/OAI/OpenAPI-Specification\">OpenAPI Specification</a></li>\n<li>Document and mock the API straight away enables greater collaboration</li>\n<li>Seek feedback from consumers to validate the design/contract. Iterate to solidify the contract</li>\n<li>Goal is to produce API Spec</li>\n</ul>\n<p>Several tools are available to assist in the design process. The most popular are:&nbsp;<a href=\"http://apiblueprint.org/\">API Blueprint</a>&nbsp;<a href=\"http://raml.org/\">RAML</a>&nbsp;<a href=\"http://swagger.io/\">Swagger</a></p>\n<p>Implementation:</p>\n<p>This stage entails coding, integrating, build and test the API</p>\n<ul>\n<li>For protection against all kinds of external threats, fronting APIs with an API management platform and enforce a set of consistent security policies at the API proxy layer</li>\n<li>API proxies need to be tested and deployed into production. They&rsquo;re closely linked to the target APIs/backend applications they front. Thus, one needs to coordinate the API lifecycle and the software development lifecycle (SDLC) of these applications</li>\n<li>Use CI/CD for streamline for promotion process of an API version</li>\n</ul>\n<p>Management:</p>\n<ul>\n<li>Incorporate API Management Gateway</li>\n<li>Incorporate local MicroGateway to guard External and Internal API access</li>\n<li>Access Control, Security, rate limits, analytics</li>\n<li>Tools: Apigee, Kong, nginx+/varnish</li>\n<li>Building Effective API and increase awareness and feedback</li>\n</ul>\n<p>Tools: Developer Portal, Community Building/Neo Blogs, Pilots/Case Studies, Measure Acceleration</p>\n<h1 id=\"eight\">Managing API Release Though Dev Portal</h1>\n<p>How API lifecycle aligns with Pearson SDLC:</p>\n<ul>\n<li>The API lifecycle should be aligned with the every team&rsquo;s own SDLC process with various stages like dev, test, ppe and prod, which provides the runtime execution context for the API proxies (Dev vs PPE target endpoints, for example)</li>\n<li>Automated testing and deployment of APIs</li>\n<li>API Lifecycle adds a unique aspect that it requires for a &ldquo;Sandbox Test&rdquo; environment where both internal users and external users can access and tryout against a target. This target ideally should not be be able to affect production target database or traffic</li>\n</ul>\n<p>&nbsp;</p>\n<div>\n<div id=\"file-52\">\n<h2><a href=\"https://test-pearson.devportal.apigee.io/file/52\">env.png</a></h2>\n<div><img src=\"https://code.pearson.com/system/files/env.png\" alt=\"\" width=\"1364\" height=\"536\" data-delta=\"4\" /></div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>Note:</p>\n<ol>\n<li>Currently Pearson&rsquo;s Pre Prod Environment strategy specifies &ldquo;Staging is a pre-production (PPE) environment, for final testing immediately prior to deploying to production. It seeks to mirror the actual production environment as closely as possible&rdquo;.</li>\n<li>In practice, some teams use &ldquo;Staging&rdquo; or &ldquo;PPE&rdquo; as their Integration Test environment.</li>\n<li>API Lifecycle adds a unique aspect that it requires for a &ldquo;Sandbox Test&rdquo; environment where both internal users and external users can access and tryout against a target. This target ideally should not be be able to affect production target database or traffic.</li>\n</ol>\n<p>API Actors and API Testing - consider how your API Release Management will support different API development teams and API Consuming teams and app and the kind testing they need:</p>\n<ul>\n<li>\n<p>API Developer teams- the team that develops the current API</p>\n</li>\n<li>\n<p>Internal App and 3rd Party Partner teams&nbsp;- Many API teams work closely with selected 3rd party partners or internal teams to build Apps to consume their APIs</p>\n</li>\n<li>\n<p>External Developers&nbsp;- Public APIs or an open developer program needs not be tied to API release</p>\n</li>\n<li>\n<p>Mock Testing&nbsp;- Mock Testing allows you to mock any server or service that you connect to over HTTP or HTTPS, such as a REST API. This is useful in testing applications early</p>\n</li>\n<li>\n<p>App Integration Testing&nbsp;- testing API from consuming apps&rsquo; perspective to make sure the API works with the apps as design intended. Sometimes it&rsquo;s testing against the version of API (e.x. v1.0) that is live in production or testing against the current version of API (e.x. v1.1) that is being developed. Our API deployment strategy is to deploy multiple API versions so both API v1.0 and v1.1 can be supported simultaneously. If no breaking change between v1.0 and v1.1, App development should be able to be done against release v1.1 and App developers should have high confidence that this should work in production OK. If there is a breaking change, app should specify v1.1 to test and coordinate app release with API v1.1 release.</p>\n</li>\n<li>\n<p>App Sandbox Testing&nbsp;- allow Internal app teams and 3rd Party Partner teams as wells as External developers to learn, tryout and test their apps against a pre production environment but against a non production target. It mimics the live production environment. It provides a shielded space where you can initiate and watch your application process the requests you make to the APIs without touching any live Production data.</p>\n</li>\n</ul>\n<p>We will need to be able to support both App Integration Testing and App Sandbox Testing.</p>\n<p>&nbsp;</p>\n<div>\n<div id=\"file-53\">\n<h2><a href=\"https://test-pearson.devportal.apigee.io/file/53\">test-matricx.png</a></h2>\n<div><img src=\"https://code.pearson.com/system/files/test-matricx.png\" alt=\"\" width=\"1792\" height=\"856\" data-delta=\"5\" /></div>\n</div>\n</div>\n<p>&nbsp;</p>\n<p>To support the above described developer teams and align with current Pearson&rsquo;s Environment strategy. We propose the following setup to support API release: One principle is that API Management platform is required to support isolation between Non-Production and Production API traffic by separating them. For example, Apigee has &ldquo;Organization&rdquo; support where typically it provides a &ldquo;Non Prod&rdquo; Edge org and a &ldquo;Prod&rdquo; Edge Org. The environments can be split across two orgs to allow administrative separation of the environments.</p>\n<p>How to setup Dev Portal to support API Release Promotion within API Lifecycle?</p>\n<p>To efficiently manage API Lifecycle states, and promote an API version from design, to implement, to deploy from the lowest-level development environment to production, and eventually to deprecating, it needs to ties into the Developer Portal (DevOps).</p>\n<p>The Developer Portal provides a Self-Service platform to allow developers to:</p>\n<ul>\n<li>Isolate roles as who can deploy API into non-production and production</li>\n<li>Support non-production environments promotion via Self-Service</li>\n<li>Allow API teams to request via tickets to deploy an API to production, upgrade an API to a higher version and sun-setting APIs (either deprecate a particular version of API, or retire an entire API completely removing it from API Gateway</li>\n</ul>\n<p>However, each Developer Portal environment (dev, test and live) can point to only one Apigee Edge org. This imposes some challenges to how the API Release is managed - One Developer Portal or Multiple?</p>\n<p>Three Alternatives:</p>\n<ol>\n<li>Two Developer portals: Test Dev Portal and Live Dev Portal</li>\n<li>One Dev Portal: Testing Apps only - live version of the Dev Portal points to the Non-Prod Edge Org</li>\n<li>One Dev Portal: live version of the Dev Portal points to the Prod Edge Org</li>\n</ol>\n<p>API Dev Portal with Production Apps only option is deemed as most practical option for us to move forward.</p>\n<p><img src=\"https://test-pearson.devportal.apigee.io/content/files/test-env.png\" width=\"800\" /></p>\n<p>Under this One Dev Portal with Prod Org setup, here are the how each high level use cases from different users can be supported:</p>\n<p><img src=\"https://test-pearson.devportal.apigee.io/content/files/test-usecase1.png\" width=\"800\" /><br /><br /><img src=\"https://test-pearson.devportal.apigee.io/content/files/test-usecase2.png\" width=\"800\" /></p>\n<h1 id=\"nine\">Security</h1>\n<p>Pearson has defined various security policies, standards and guidelines. You can find an overview of&nbsp;<a href=\"https://neo.pearson.com/docs/DOC-586645\">all Pearson Security Policies, Standards and Guidelines</a>&nbsp;on Neo.</p>\n<p>The following standards are specifically applicable to API development:</p>\n<ul>\n<li><a href=\"https://neo.pearson.com/docs/DOC-602268\">API Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-602264\">Data Input Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-614683\">Malicious Input Handling Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-607996-sec-std-cde-106-output-encodingpdf\">Output Encoding Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-614690\">Application Error Handling Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-602263-appsec-cookies-security-standard-10pdf\">Cookies Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-606844-cross-origin-resource-sharingpdf\">Cross Origin Resource Sharing</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-602266-appsec-session-management-security-standard-10pdf\">Session Management Security Standard</a></li>\n</ul>\n<p>The following standards are applicable to application development in general:</p>\n<ul>\n<li><a href=\"https://neo.pearson.com/docs/DOC-602270\">Code Review Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-618961-secure-coding-security-standard\">Secure Coding Security Standard</a></li>\n<li><a href=\"https://neo.pearson.com/docs/DOC-600444-sec-std-in-013-audit-and-logging-security-standard\">Audit &amp; Logging Security Standard</a></li>\n</ul>\n<p>Application Security Assessments</p>\n<p>Pearson Application Security (AppSec) team provides services for code scanning, dynamic application security testing and manual assessments. See the AppSec Onboarding page for details.</p>\n<p>Checkmarx CxSuite is used for code scanning. Repositories on Pearson&rsquo;s Bitbucket service can be integrated easily. GitHub can be used as well. Code scans can be triggered either based on on a schedule (e.g., weekly) or directly from Jenkins. However, currently there is a limitation that triggering Checkmarx from an AWS-based Jenkins server isn&rsquo;t possible.</p>\n<p>Rapid7 AppSpider is used for all dynamic scans. If you provide a Swagger specification file for your API the AppSpider scanner can automatically test your API for a large number of potential security issues. Additionally, a scanning schedule can be defined in AppSpider for your API. As a general requirement, all high or medium security issues MUST be fixed, and all low security issues SHOULD be fixed.</p>\n<p>Please see the&nbsp;<a href=\"https://neo.pearson.com/groups/information-security-s-sdlc\">S-SDLC page</a>&nbsp;on Neo for additional information about Pearson&rsquo;s Secure Software Development Lifecycle.</p>\n<p>Securing Services</p>\n<p>Authentication is the act of verifying that a given request is from someone (or some system) that is known to the service and that the requestor is who they say they are. While authentication is the act of verifying a requestor is who they say they are, authorization is verifying the requestor has permission to perform the requested operation.</p>\n<p>Essentially, the process goes something like this:</p>\n<ol>\n<li>Client makes a request, including authentication token in X-Authorization header or token query-string parameter in the request.</li>\n<li>Service verifies presence of the authorization token, validates it (that it's valid and not expired) and parses or loads the authentication principal based on the token contents.</li>\n<li>Service makes a call to the authorization service providing authentication principal, requested resource and required permission for operation.</li>\n<li>If authorized, service continues with normal processing.</li>\n</ol>\n<p>#3 above could be expensive, but assuming a cacheable access-control list (ACL), it is conceivable to create an authorization client that caches the most-recent ACLs to validate locally before making remote calls.</p>\n<p>Authentication</p>\n<p>Current best practice is to use APIKey in the header combined with a required PearsonSSOSession in the request. The application API key cannot be used on its own to access the API.</p>\n<p>Another best practice is to use OAuth for authentication. OAuth2 is highly recommended, but is still in draft state. OAuth1 is definitely an acceptable alternative. 3-Legged OAuth is also an option for certain cases. Read more about the OAuth specification at http://oauth.net/documentation/spec/.</p>\n<p>OpenID is an additional option. However, it is recommended that OpenID be used as an additional authentication option, leveraging OAuth as primary. Read more about the OpenID specification at http://openid.net/developers/specs/.</p>\n<p>Transport Security</p>\n<p>All authentication should use SSL. OAuth2 requires the authorization server and access token credentials to use TLS.</p>\n<p>Switching between HTTP and HTTPS introduces security weaknesses and best practice is to use TLS by default for all communication.</p>\n<p>In addition, All Traffic \"In Transit\" Must Be Encrypted (ala HTTPS). Securing your services doesn't stop at internal traffic level. This means all calls between API and any internal target services must be via HTTPS, includes Service to Service calls.</p>\n<p>Authorization</p>\n<p>Authorization for services is not really any different than authorization for any application. It's based on the question, &ldquo;Does this principal have the requested permission on the given resource?&rdquo; Given that simple trifecta of data (principal, resource, and permission), it's fairly easy to construct an authorization service that supports the concepts. Principal is the person or system who is granted a permission on a resource. Using those generic concepts, it is possible to have a cacheable access control list (ACL) for each principal.</p>\n<p>Application Security</p>\n<p>The same principles in developing a secure web application holds true for RESTful services.</p>\n<ul>\n<li>Validate all input on the server. Accept &ldquo;known&rdquo; good input and reject bad input.</li>\n<li>Protect against SQL and NoSQL injection.</li>\n<li>Output encode data using known libraries such as Microsoft&rsquo;s Anti-XSS or OWASP&rsquo;s AntiSammy.</li>\n<li>Restrict the message size to the exact length of the field.</li>\n<li>Services should only display generic error messages.</li>\n<li>Consider business logic attacks. For example could an attacker skip through a multi-step ordering process and order a product without having to enter credit card information?</li>\n<li>Log suspicious activity.</li>\n</ul>\n<p>RESTful Security Considerations:</p>\n<ul>\n<li>Validate JSON and XML for malformed data.</li>\n<li>Verbs should be restricted to the allowable method. For example, a GET request should not be able to delete an entity. A GET would read the entity while a DELETE would remove the entity.</li>\n<li>Be aware of race conditions.</li>\n</ul>\n<p>API gateways can be used to monitor, throttle, and control access to the API. The following can be done by a gateway or by the RESTful service.</p>\n<ul>\n<li>Monitor usage of the API and know what activity is good and what falls out of normal usage patterns.</li>\n<li>Throttle API usage so that a malicious user cannot take down an API endpoint (DOS attack) and have the ability to block a malicious IP address.</li>\n<li>Store API keys in a cryptographically secure keystore.</li>\n</ul>\n<h1 id=\"ten\">API Resource Naming</h1>\n<p>GLP API Playbook recommends:</p>\n<p>Consistently use plural nouns only (no singular nouns, no verbs;) in&nbsp;snake_case&nbsp;(all lower case; multiple words separated by underscore) for the resource names in the hierarchy path of the URI.</p>\n<p>Examples</p>\n<pre>/flights/1234\n/flights/1234/passengers\n/flights/1234/passengers/567/phone_numbers/123\n</pre>\n<p>The only exception to the above prescription is for singleton resources which would never have a collection and can be identified by the name itself without need for an identifier.</p>\n<p>Examples</p>\n<pre> /flights/12345/configuration\n</pre>\n<p>In the above example there must never be a case such as .../12345/configuration/123. The configuration resource in this case is a singleton and can be identified by its name.</p>\n<h3 id=\"109\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#109\">Must:&nbsp;Use plural nouns only</a></h3>\n<h3 id=\"110\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#110\">Must:&nbsp;Use Snake_case and multiple words separated by underscore for resource naming</a></h3>\n<h1 id=\"eleven\">URL Syntax</h1>\n<p>GLP API Playbook recommends:</p>\n<p>There should be only 2 base URLs per resource &ndash; the first URL for a collection, and the second for a specific element in the collection.</p>\n<p>Examples</p>\n<pre>/flights\n/flights/1234\n</pre>\n<h3 id=\"111\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#111\">Must:&nbsp;Use only 2 base URLs per resource</a></h3>\n<p>Verbs (e.g. &ndash; get, do, etc) must not be used in the base URLs</p>\n<h3 id=\"112\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#112\">Must:&nbsp;Verbs must not be used in the base URLs</a></h3>\n<p>Two base URLs per resource do not mean one can only have one resource in a given URL. To avoid multiple calls to the API for resources that are hierarchical dependent, take advantage of nested resources. For instance, to get a list of passengers for a given flight, the URI may be:</p>\n<p>Examples</p>\n<pre>GET /flights/1234/passengers\n</pre>\n<h1 id=\"twelve\">Consistent HTTP Verbs Implementation</h1>\n<p>Use HTTP verbs (GET, HEAD, OPTIONS, PATCH, PUT, DELETE, POST) as defined in HTTP protocol to operate on the collections and elements.</p>\n<p>Method</p>\n<p>Semantic</p>\n<p>GET</p>\n<p>It retrieves whatever information (in the form of an entity) is identified by the Request-URI. If the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity.</p>\n<p>The semantics of the GET method change to a \"conditional GET\" if the request message includes an If-Modified-Since, If-Unmodified-Since, If-Match, If- None-Match, or If-Range header field. A conditional GET method requests that the entity be transferred only under the circumstances described by the conditional header field(s).</p>\n<p>HEAD</p>\n<p>The HEAD method is identical to GET except that the server must not return a message-body in the response. The meta-information contained in the HTTP headers in response to a HEAD request should be identical to the information sent in response to a GET request. This method can be used for obtaining meta- information about the entity implied by the request without transferring the entity-body itself.</p>\n<p>OPTIONS</p>\n<p>The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.</p>\n<p>PUT</p>\n<p>The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity should be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.</p>\n<p>DELETE</p>\n<p>The DELETE method requests that the origin server delete the resource identified by the Request-URI.</p>\n<p>** POST**</p>\n<p>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI.</p>\n<p>PATCH</p>\n<p>The PATCH method requests that a set of changes described in the request entity be applied to the resource identified by the Request-URI. The set of changes is represented in a format called a \"patch document\" identified by a media type. The difference between the PUT and PATCH requests is reflected in the way the server processes the enclosed entity to modify the resource identified by the Request-URI. In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced. With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.</p>\n<h3 id=\"113\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#113\">Must:&nbsp;Strictly follow HTTP Verbs for CRUD operation</a></h3>\n<h1 id=\"thirteen\">Partial Response and Pagination</h1>\n<p>Partial responses allow developers to request only the information they need; Pagination keeps the provider from returning all resources in a single response.</p>\n<p>Partial responses is independent of pagination, there's no direct link between them. They are included in this single prescription because the objective of both is to reduce the response payload.</p>\n<p>Partial Response</p>\n<p>For Partial Response, use an optional parameter called &ldquo;fields&rdquo; with comma delimited names of fields that the developer wants to be returned by the API.</p>\n<p>For the case of selecting the fields of nested objects that are part of the response, specify the object name and use a dot to specify the attribute name within that object.</p>\n<p>Examples</p>\n<pre>GET /flights/AXHD124?fields=origin,destination\n200 OK\n{\n\t\"data\":{\n\t\"@type\": \"flight\",\n\t\"@id\": \"AXHD124\",\n\t\"origin\": \"NYC\",\n\t\"destination\": \"EZE\"\n} }\n\nGET /flights/AXHD124?\nfields=origin,destination,customer.first_name,customer.last_name\n200 OK\n{\n\t\"data\":{\n\t \"@type\": \"flight\",\n\t\"@id\": \"AXHD124\",\n\t\"origin\": \"NYC\",\n\t\"destination\": \"EZE\",\n\t\"customer\":{\n\t\"first_name\": \"William\",\n\t} }\n}\n</pre>\n<p>In response to a valid request that includes the \"fields\" query parameter, server should return an HTTP 200 OK status code, along with the requested data. If the fields query parameter has an error or is otherwise invalid, the server should return an HTTP 400 Bad Request status code, along with an error message telling the user what was wrong with their fields selection.</p>\n<p>Do not use HTTP Status code 206 or HTTP Range, see Additional Notes regarding this topic..</p>\n<h3 id=\"114\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#114\">Must:&nbsp;Use an optional parameter called &ldquo;**fields**&rdquo; for Partial Response</a></h3>\n<p>Pagination</p>\n<p>When dealing with collection resources containing a large number of members, it may be desirable to return only a subset. To Paginate resources, use page[offset] and page[limit] as query parameters. For example, the following returns records 51 through 60:</p>\n<p>Examples</p>\n<pre>GET /customers?page[offset]=50&amp;page[limit]=10\n200 OK\n{\n\t\"data\": [{\n\t\t...\n\t}],\n\t\"links\": [\n\t\t{ \"rel\": \"first\", \"href\": \"/customers?page[offset]=0&amp;page[limit]=10\" },\n\t\t{ \"rel\": \"last\", \"href\": \"/customers?page[offset]=70&amp;page[limit]=10\" },\n\t\t{ \"rel\": \"prev\", \"href\": \"/customers?page[offset]=40&amp;page[limit]=10\" },\n\t\t{ \"rel\": \"next\", \"href\": \"/customers?page[offset]=60&amp;page[limit]=10 }\"\n\t\t]\n}\n</pre>\n<p>Note: Use of Offset indicates that response should skip the number of records specified by the Offset field before beginning to return records to the client. Offset=0 is the same as omitting the Offset clause. If both Offset and Limit appear, then Offset number of records are skipped before starting to count the Limit rows that are returned.</p>\n<p>In addition, the server response should include the following in each response that is a collection of records: Link to the next page for a paginated collection, Link to the previous page for a paginated collection, Link to the first page of the paginated collection (optional) Link to the last page of the paginated collection (optional), An indicator of the collection size (optional)</p>\n<h3 id=\"115\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#115\">Must:&nbsp;Use page[offset] and page[limit] as query parameters for Pagination</a></h3>\n<h1 id=\"fourteen\">Discover the Data</h1>\n<p>Pearson has developed extensive enterprise entity data and asembled extensive collection of data in data catalog.</p>\n<p>API development team can browse the data catalog to search and select available:</p>\n<ul>\n<li>Ontologies</li>\n<li>Namespaces</li>\n<li>Packages</li>\n<li>Classes</li>\n<li>Properties</li>\n<li>Reference Data</li>\n<li>Schemas</li>\n</ul>\n<p>This allows the API designer to utilize existing data and defined structure to include in their API Contract-first design process and foster data reuse and speed up the API design process.</p>\n<p>This alkows the API designer to directly include existing data defined in Data Catalog using custom Extension within an OpenAPI specification file; implementing Open API extensions by simply add existing data in the Data Catalog and use these informations to generate documentation, client code, server code or tests or even configure some tools.</p>\n<p>This lets API Consumer to browse a data type and link it to see which API uses it. It requires storing the consuming API information along with Data Catalog. This will allow a API consumer to browse a data type and see which API is already providing the data and think if they can use the existing APIs Cross-reference between API and Data Catalog.</p>\n<p>Additionally we can provide full Cross-reference between API PDN and Dev Portal with all the back-end Data Catalog</p>\n<h3 id=\"116\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#116\">Must:&nbsp;Use Data Catalog to discover and reuse existing data</a></h3>\n<p>&nbsp;</p>\n<p><img src=\"https://test-pearson.devportal.apigee.io/content/files/data-catalog.png\" alt=\"Sneak preview of Data Catalog\" /></p>\n<h1 id=\"fifteen\">Common Headers</h1>\n<p>Here we list some of the Common Headers that should be included in API requests:</p>\n<ul>\n<li>InitialAPIVersion</li>\n<li>Apikey</li>\n<li>PearsonSSOSession</li>\n<li>ETag together with If-(None-)Match header</li>\n<li>Correlation-Id</li>\n<li>Policy for integrate with ForgeRock</li>\n<li>CachePolicy</li>\n</ul>\n<h3 id=\"117\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#117\">Must:&nbsp;Include Common Headers</a></h3>\n<h1 id=\"sixteen\">ApiKey and PearsonSSOSession</h1>\n<p>ApiKey and PearsonSSOSession are commonly required to access the API and they are required to be sent by the API Applications that want to access the API. Here are some quidelines on storing ApiKey and pearsonSSOSession on the client side:</p>\n<ul>\n<li>If the API key is a normal \"application API key\" then there are no requirements from a security point of view, i.e., it can be hardcoded in the Javascript code like a global variables.</li>\n<li>As best practice it is to recommend developers, the usage of variables and/or properties files to put the credentials. But they should add this file to the ignore list of their source control system to prevent any possible \"source leaking\".</li>\n<li>The SSO token is usually stored in a cookie called \"PearsonSSOSession\".</li>\n<li>\"System API keys\" must never be used in a Javascript application as they are used for authentication. They should only be used in \"backend\" applications.</li>\n<li>Regarding system to system communication: Using a system API key requires approval and should only be done is a service account cannot be used in the application (i.e., normal application API key plus AD service account is the preferred approach).</li>\n</ul>\n<h1 id=\"seventeen\">Robustness principle</h1>\n<p><a href=\"http://en.wikipedia.org/wiki/Jon_Postel\">Jon Postel</a>&nbsp;says &ldquo;<a href=\"http://en.wikipedia.org/wiki/Robustness_principle\">Be conservative in what you do, be liberal in what you accept from others</a>&ldquo;. This approach can be generalised across other information sent from a client to a server and vice versa. Clients like API consumers should practice &ldquo;Defensive&rdquo; coding to make sure the robustness of client application. For example, add a null check before consuming response data sent from an API, instead of purely relying on the response always sends the right data.</p>\n<p>How you handle an API change depends on the size of the change. Some changes are minor and backward compatible with the previous version. You might, for example, add attributes to requests or responses. It makes sense to design clients and services so that they observe the robustness principle. Clients that use an older API should continue to work with the new version of the service. The service provides default values for the missing request attributes and the clients ignore any extra response attributes.</p>\n<p>We recommend teams, especially teams that consume APIs practice using &ldquo;Robustness principle&rdquo;&nbsp;in their coding and testing to make sure it won&rsquo;t easily break and ensure the codes can recover.</p>\n<h3 id=\"118\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#118\">Must:&nbsp;Practice using &ldquo;Robustness principle&rdquo;</a></h3>\n<h1 id=\"eighteen\">API Health Route</h1>\n<p>Some API implements a Health Route to provide a way for client to easily test the availability of an API, also provide an option to be integrated the API Heath Route with an overall API Monitoring System.</p>\n<p>GRID has made a recommendation for every API to provide a standard&nbsp;<a href=\"https://docs.google.com/document/d/1qZS53pAzggB1FZAYGYAXet8PHej2CZrr6G76DykD3Bs/edit#heading=h.j1kwvx6gds5m\">API Health Route</a>:</p>\n<p>Overview</p>\n<p>For GRID APIs we want all teams to support a common health route with no authentication. This will help with maintainability across GRID APIs as well as allow for our pan GRID monitoring tools to be able to key off of a common route for the status of all APIs. We will require a few common fields and then allow teams to add additional fields as they see fit, e.g, cassandraStatus = sick.</p>\n<p>This will publicly available and you can call it from the ELB DNS, but won&rsquo;t be able to be accessed from apigee without an oauth2 token.</p>\n<p>If teams want to support other routes such as /status that&rsquo;s fine, just make sure you have your /health route too.</p>\n<pre>Path\nhttps://{your-domain}/health \n\nRequired Fields\n\t;name - the name of your API\n\t;version - the app version\n\t;_links - at a minimum &ldquo;self&rdquo; link\n\nResponse Code: 200\n\nResponse Format\n{\n\t\"_links\": {\n\t\t\"self\": { \"href\": \"https://{mydomain}/health\" },\n\t},\n\t\"name\":\"Discussions API\",\n\t\"version\":\"0.2.10\",\n\t\t(... feel free to additional properties here as you see fit...)\n}\n</pre>\n<p>We think it&rsquo;s a good practice that will enable APIs&rsquo; support and self-health monitoring. We would recommend all API Health Route be in a consistent path as&nbsp;https://{your-domain}/health</p>\n<p>We recommend all teams to support a common health route with no authentication.&nbsp;This API Health Route to go through API Management layer like Apigee. Whether an API is allow external access API or purely internal access API, we recommend the callers of the API Health provide an API Key, this way we ensure the API Health route is called within Pearson applications.</p>\n<h3 id=\"119\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#119\">Must:&nbsp;Support a common health route</a></h3>\n<h1 id=\"nineteen\">Correlation-Id</h1>\n<p>The ability to track, trace and correlate how a request makes its way through systems is very important. Without it it is very difficult to perform a problem trace on a live logs like Kibana. With the Correlation-Id, we can trace the inbound request and correlate it on Apigee, target API and all the way down to Marklogic layer. It will help us to trace any fault to a particular request Correlation-Id.</p>\n<p>This is also a good practice recommended by previous Pearson group for Revel and GRID API interaction -&nbsp;<a href=\"https://neo.pearson.com/groups/api-practice-area/blog/2014/10/16/ability-to-correlate-requests-from-clients-and-across-systems\">GRID API&rsquo;s recommendation</a>.</p>\n<p>Here are the Guidelines taken from GRID API recommendation:</p>\n<p>Clients are to create a new UUID for each request to a service and put it in a HTTP header by the name of \"Correlation-Id\". API systems must look for this header. The API system must use the value in its error logs and add it as the same header, \"Correlation-Id\", to any other services it calls. The API system should not create a new or alter the ID it received, unless it didn't receive one and then it should create one in a UUID format.</p>\n<p>Normally every call originating on the client side has a new correlation_Id. However, the clients are free to use the same correlation id for the same transaction if it makes sense. The only rule is it need to be passed down by a backend system if that backend calls another API within the same call chain.</p>\n<p>Pearson Application Client calls APIs should send a &ldquo;correlation-Id&rdquo;. Now most Pearson systems are following correlation id in the format of:</p>\n<ul>\n<li>XXXX-b6443818-5996-406a-a7a4-397a416cf45f</li>\n<li>where XXXX is a 4 or 5 char code for the system.</li>\n</ul>\n<p>For example QUAD for Quad and possibly CHCR for Chaucer and the rest is a v4 UUID. Possible XXXX includes VEGA for CITE Reference Web App, ALTR for CITE Reference Android App, IZAR for CITE Reference iOS App.</p>\n<p>Example HTTP Header</p>\n<pre>Correlation-Id: VEGA-2c350eaa-7f87-445e-8dea-dc86bc18da12\nClient Request Pseudo Code:\n\n\thttpRequest = new HttpRequest(\"https://someDomain.com\")\n\thttpRequest.addHeader(\"Correlation-Id\", new UUID)  /// Always generate a new UUID for each request\n \nAPI Incoming Request Pseudo Code:\n\n\tif Correlation-Id == null or Correlation-Id == \"\" then\n\t\tCorrelation-Id = &ldquo;XXXX-&rdquo; + new UUID\n \nAPI Request to Another Service Pseudo Code:\n\n\thttpRequest = new HttpRequest(\"https://someDomain.com/someAPI\")\n\thttpRequest.addHeader(\"Correlation-Id\", correlationId)\n</pre>\n<p>We recommend to follow GRID API Recommendation to have clients include a Correlation_Id in the HTTP header &ldquo;Correlation-Id&rdquo;,&nbsp;it need to be passed down by a backend system if that backend calls another API within the same call chain.</p>\n<h3 id=\"120\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#120\">Must:&nbsp;Include a Correlation_Id in the HTTP header</a></h3>\n<h1 id=\"twenty\">Mandatory Swagger</h1>\n<p>We recommend&nbsp;<a href=\"http://swagger.io/\">Swagger</a>&nbsp;should be used to document endpoints. There should be different Swagger endpoints for different versions of API.</p>\n<p>The use of Swagger has the additional benefit that the AppSpider tool (provided by Pearson&rsquo;s AppSec team) can automatically test the API based on the Swagger specification for potential security issues.</p>\n<h3 id=\"121\"><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#121\">Must:&nbsp;All API should have mandatory OpenAPI (Swagger) documentation</a></h3>\n<h1 id=\"twentyone\">Appendix A: Integrate with Bitesize</h1>\n<p>A potential integration between API Management like Apigee and API/Microservices that are on Bitesize platform is still being worked.</p>\n<p>Here is the potential flow:<img src=\"https://test-pearson.devportal.apigee.io/content/files/bitewise-integration.png\" alt=\"flow\" /></p>\n<h1 id=\"twentytwo\">Appendix B: Tooling</h1>\n<p>This is not a part of the actual guidelines, but might be helpful for following them. Using a tool mentioned here doesn&rsquo;t automatically ensure you follow the guidelines.</p>\n<p>API First Integrations</p>\n<p>The following frameworks were specifically designed to support the API First workflow with OpenAPI YAML files (sorted alphabetically):</p>\n<ul>\n<li>\n<h2><a href=\"https://github.com/zalando/connexion\">Connexion: OpenAPI First framework for Python on top of Flask</a></h2>\n</li>\n<li>\n<h2><a href=\"https://github.com/zalando/friboo\">Friboo: utility library to write microservices in Clojure with support for Swagger and OAuth</a></h2>\n</li>\n<li>\n<h2><a href=\"https://github.com/ebowman/api-first-hand\">Api-First-Hand: API-First Play Bootstrapping Tool for Swagger/OpenAPI specs</a></h2>\n</li>\n<li>\n<h2><a href=\"https://github.com/swagger-api/swagger-codegen\">Swagger Codegen: template-driven engine to generate client code in different languages by parsing Swagger Resource Declaration</a></h2>\n</li>\n<li>\n<h2><a href=\"https://github.com/zalando-stups/swagger-codegen-tooling\">Swagger Codegen Tooling: plugin for Maven that generates pieces of code from OpenAPI specification</a></h2>\n</li>\n<li>\n<h2><a href=\"https://github.com/zalando/intellij-swagger\">Swagger Plugin for IntelliJ IDEA: plugin to help you easily edit Swagger specification files inside IntelliJ IDEA</a></h2>\n</li>\n</ul>\n<p>The Swagger/OpenAPI homepage lists more&nbsp;<a href=\"https://swagger.io/open-source-integrations/\">Community-Driven Language Integrations</a>, but most of them do not fit our API First approach.</p>\n<h1 id=\"twentythree\">Appendix C: References</h1>\n<p>source&nbsp;<a href=\"https://neo.pearson.com/groups/engineering-best-practices-group/pages/engineering-best-practices\">Pearson Engineering Best Practices Group (EBPG)</a></p>\n<ul>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676532-static-code-analysis-using-sonar\">Static Code Analysis</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676603-code-review-process-using-bitbucket\">Code Review Process using Bitbucket</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676604-unit-testing\">Unit Testing</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676605-continuous-integration\">Continuous Integration</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676606-continuous-delivery\">Continuous Delivery</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676607-functional-testing\">Functional Testing</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676608-alerting-monitoring-and-logging\">Alerting, Monitoring, and Logging</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676609-security\">Security</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676610-accessibility\">Accessibility</a></h2>\n</li>\n<li>\n<h2><a href=\"https://neo.pearson.com/docs/DOC-676611-globalization\">Globalization</a></h2>\n</li>\n</ul>\n<h1 id=\"twentyfour\">Appendix D: All Must-have Recommendations</h1>\n<p>&nbsp;</p>\n<nav role=\"navigation\">\n<p>&nbsp;</p>\n<h2>Quick Reference of Must-have Recommendations</h2>\n<ol>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#100\">May: Follow API First Principle or Code-First Approach</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#101\">Must: Include version number in the URL</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#102\">Must: API version number in accept header</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#103\">Must: Include versions at the top level</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#104\">Must:Use v[major.minor] notation, for example, v1.0, v1.1</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#105\">Must:Single deployment that contains multiple versions</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#106\">Must: Maintain at least one version and at most N version back</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#107\">Must: Version explicitly and mandatory</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#108\">Must: Return HTTP 406 for Unsupported or Obsolete Version</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#109\">Must: Use plural nouns only</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#110\">Must: Use Snake_case and multiple words separated by underscore for resource naming</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#111\">Must: Use only 2 base URLs per resource</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#112\">Must: Verbs must not be used in the base URLs</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#113\">Must: Strictly follow HTTP Verbs for CRUD operation</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#114\">Must: Use an optional parameter called &ldquo;**fields**&rdquo; for Partial Response</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#115\">Must: Use page[offset] and page[limit] as query parameters for Pagination</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#116\">Must: Use Data Catalog to discover and reuse existing data</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#117\">Must: Include Common Headers</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#118\">Must: Practice using &ldquo;Robustness principle&rdquo;</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#119\">Must: Support a common health route</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#120\">Must: Include a Correlation_Id in the HTTP header</a></li>\n<li><a href=\"https://test-pearson.devportal.apigee.io/content/api-guidelines#121\">Must: All API should have mandatory OpenAPI (Swagger) documentation</a></li>\n</ol>\n</nav></div>\n</article>",
      "tags": [
        {
          "name": "api guidelines"
        },
        {
          "name": "best practices"
        }
      ],
      "category": "Documentation",
      "subCategory": "Creating APIs",
      "allowComments": true
    },
    {
      "id": 4,
      "title": "Version 6 of Angular Now Available",
      "author": "Derek Carter",
      "publicationDate": "2018-06-20T04:00:00.000Z",
      "summary": "The 6.0.0 release of Angular is here! This is a major release focused less on the underlying framework, and more on the toolchain and on making it easier to move quickly with Angular in the future.",
      "content": "<p id=\"e2a2\">As a part of this release, we are synchronizing the major versions going forward for the framework packages (@angular/core,&nbsp;@angular/common,&nbsp;@angular/compiler, etc), the Angular CLI, and Angular Material + CDK. All are releasing as 6.0.0 today. We made this change to clarify cross compatibility. The minor and patch releases for these projects will be issued based on the project&rsquo;s needs.</p>\n<p>&nbsp;</p>\n<p id=\"8b0f\">See the full list of changes in our changelogs:&nbsp;<a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">framework</a>,&nbsp;<a href=\"https://github.com/angular/material2/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/material2/blob/master/CHANGELOG.md\">material+cdk</a>,&nbsp;<a href=\"https://github.com/angular/angular-cli/releases\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/angular-cli/releases\">cli</a>.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"7a6c\">ng update</h3>\n<p>&nbsp;</p>\n<p id=\"80c8\">ng update &lt;package&gt;&nbsp;is a new CLI command that analyzes your&nbsp;package.json&nbsp;and uses its knowledge of Angular to recommend updates to your application. To see it in action, check out our&nbsp;<a href=\"https://update.angular.io/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://update.angular.io\">update guide</a>.</p>\n<p>&nbsp;</p>\n<p id=\"9c50\">Not only will&nbsp;ng update&nbsp;help you adopt the right version of dependencies, and keep your dependencies in sync, but 3rd parties can provide update scripts using&nbsp;<a href=\"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2\" target=\"_blank\" rel=\"noopener\" data-href=\"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2\">schematics</a>. If one of your dependencies provides an&nbsp;ng updateschematic, they can automatically update your code when they need to make breaking changes!</p>\n<p>&nbsp;</p>\n<p id=\"9428\">ng update&nbsp;will not replace your package manager, but uses npm or yarn under the hood to manage dependencies. In addition to updating dependencies and peer dependencies,&nbsp;ng update&nbsp;will apply needed transforms to your project.</p>\n<p>&nbsp;</p>\n<p id=\"ae28\">For example, the command&nbsp;ng update @angular/core&nbsp;will update all of the Angular framework packages as well as RxJS and TypeScript, and will run any schematics available on these packages to keep you up to date. As part of this one command, we&rsquo;ll automatically install&nbsp;rxjs-compat&nbsp;into your application to make the adoption of RxJS v6 smoother.</p>\n<p>&nbsp;</p>\n<p id=\"054f\">We expect to see many more libraries and packages add&nbsp;ng updateschematics over the coming months, and have already heard from enterprise component library teams that are planning to use&nbsp;ng update&nbsp;to push through important changes in an automated way to save their developers time.</p>\n<p>&nbsp;</p>\n<p id=\"d685\">Learn more about&nbsp;<a href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\">how the&nbsp;</a><a href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\">ng update</a><a href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/devkit/blob/master/docs/specifications/update.md\">&nbsp;command works</a>. To get started creating your own&nbsp;ng update&nbsp;schematic, take a look at the entry in the&nbsp;<a href=\"https://github.com/ReactiveX/rxjs/blob/8c5d680494a8bc986e638f6138447917c7ba180f/package.json#L231-L233\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/ReactiveX/rxjs/blob/8c5d680494a8bc986e638f6138447917c7ba180f/package.json#L231-L233\">package.json</a><a href=\"https://github.com/ReactiveX/rxjs/blob/8c5d680494a8bc986e638f6138447917c7ba180f/package.json#L231-L233\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/ReactiveX/rxjs/blob/8c5d680494a8bc986e638f6138447917c7ba180f/package.json#L231-L233\">&nbsp;of rxjs</a>&nbsp;and its associated&nbsp;<a href=\"https://github.com/ReactiveX/rxjs/blob/master/migrations/collection.json\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/ReactiveX/rxjs/blob/master/migrations/collection.json\">collection.json</a>.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"cff5\">ng add</h3>\n<p>&nbsp;</p>\n<p id=\"0b74\">Another new CLI command&nbsp;ng add &lt;package&gt;&nbsp;makes adding new capabilities to your project easy.&nbsp;ng add&nbsp;will use your package manager to download new dependencies and invoke an installation script (implemented as a schematic) which can update your project with configuration changes, add additional dependencies (e.g. polyfills), or scaffold package-specific initialization code.</p>\n<p>&nbsp;</p>\n<p id=\"61c7\">Try out some of the following on your fresh&nbsp;ng new&nbsp;application:</p>\n<ul>\n<li id=\"7922\">ng add @angular/pwa &mdash; Turn your application into a PWA by adding an app manifest and service worker</li>\n<li id=\"2d2c\">ng add @ng-bootstrap/schematics &mdash; Add&nbsp;<a href=\"https://ng-bootstrap.github.io/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://ng-bootstrap.github.io/\">ng-bootstrap</a>&nbsp;to your application</li>\n<li id=\"92a5\">ng add @angular/material &mdash; Install and setup Angular Material and theming and register new starter components into&nbsp;ng generate</li>\n<li id=\"b744\">ng add @clr/angular@next &mdash; Install and setup Clarity from VMWare</li>\n<li id=\"7d3a\">ng add @angular/elements &mdash; Add the needed&nbsp;document-register-element.js&nbsp;polyfill and dependencies for Angular Elements (see below)</li>\n</ul>\n<p>&nbsp;</p>\n<p id=\"9b1c\">Because&nbsp;ng add&nbsp;is built on top of schematics and the npm registry, our hope is that libraries and the community will help us build a rich ecosystem of&nbsp;ng add&nbsp;supporting packages.</p>\n<p>&nbsp;</p>\n<p id=\"e19b\">Take a look at&nbsp;<a href=\"https://github.com/angular/material2/blob/master/src/lib/schematics/collection.json\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/material2/blob/master/src/lib/schematics/collection.json\">Angular Material&rsquo;s ng-add schematic</a>&nbsp;for an example to help you get started building your own ng-add schematics.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"d524\">Angular Elements</h3>\n<p>&nbsp;</p>\n<p id=\"057c\">The first release of Angular Elements is focused on allowing you to bootstrap Angular components within an existing Angular application by registering them as Custom Elements. We use this extensively in angular.io as part of our content management system to allow dynamic bootstrapping of capabilities via embedded HTML. This replaces the need to manually bootstrap Angular components found in static html content.</p>\n<p>&nbsp;</p>\n<p id=\"08d1\">Check out an&nbsp;<a href=\"https://stackblitz.com/edit/angular-f3nrpv?file=app%2Fapp.module.ts\" target=\"_blank\" rel=\"noopener\" data-href=\"https://stackblitz.com/edit/angular-f3nrpv?file=app%2Fapp.module.ts\">example of registering a component as a custom element</a>&nbsp;or&nbsp;<a href=\"https://angular.io/guide/elements\" target=\"_blank\" rel=\"noopener\" data-href=\"https://angular.io/guide/elements\">learn more about Angular Elements</a>.</p>\n<p>&nbsp;</p>\n<p id=\"abc1\">One of our community members has also produced an&nbsp;<a href=\"https://www.youtube.com/watch?v=4u9_kdkvTsc\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.youtube.com/watch?v=4u9_kdkvTsc\">Angular Elements Quick Start</a>&nbsp;video that we highly recommend.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"da7c\">Angular Material + CDK Components</h3>\n<p>&nbsp;</p>\n<p id=\"f02a\">The biggest addition is the new tree component for displaying hierarchical data. Following patterns from the data-table component, the CDK houses the core tree directives, with Angular Material offering the same experience with Material Design styles on top. We recently gave a talk about the component, so check that out for more information (<a href=\"https://www.youtube.com/watch?v=s0Vy3sLbeyA\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.youtube.com/watch?v=s0Vy3sLbeyA\">video</a>,&nbsp;<a href=\"https://docs.google.com/presentation/d/1DmWdfr8j25owK2ac5qlt7oeX6HpxQnXEGwmHIjf6EHI\" target=\"_blank\" rel=\"noopener\" data-href=\"https://docs.google.com/presentation/d/1DmWdfr8j25owK2ac5qlt7oeX6HpxQnXEGwmHIjf6EHI\">slides</a>). These new tree components come in both styled (Material&rsquo;s&nbsp;mat-tree) and unstyled versions (CDK&rsquo;s&nbsp;cdk-tree).</p>\n<p>&nbsp;</p>\n<p id=\"2d9e\">Alongside the tree, we also have new&nbsp;<a href=\"https://material.angular.io/components/badge/overview\" target=\"_blank\" rel=\"noopener\" data-href=\"https://material.angular.io/components/badge/overview\">badge</a>&nbsp;and&nbsp;<a href=\"https://material.angular.io/components/bottom-sheet/overview\" target=\"_blank\" rel=\"noopener\" data-href=\"https://material.angular.io/components/bottom-sheet/overview\">bottom-sheet components</a>. Badges help display small bits of helpful information, such as unread item counts. Bottom-sheets are a special type of mobile-centric dialogs that come up from the bottom of the viewport, commonly used to present a list of options following an action.</p>\n<p>&nbsp;</p>\n<p id=\"a93f\">The&nbsp;@angular/cdk/overlay&nbsp;package is one of the most powerful pieces of infrastructure in the CDK today. With the release of v6, this package now includes<a href=\"https://material.angular.io/cdk/overlay/overview#position-strategies\" target=\"_blank\" rel=\"noopener\" data-href=\"https://material.angular.io/cdk/overlay/overview#position-strategies\">&nbsp;new positioning logic</a>&nbsp;that helps make pop-ups that intelligently remain on-screen in all situations.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"3922\">Angular Material Starter Components</h3>\n<figure id=\"6b68\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*vD2u7I_a_uxs33qcdo2R6g.gif\" data-width=\"1261\" data-height=\"660\" data-action=\"zoom\" data-action-value=\"1*vD2u7I_a_uxs33qcdo2R6g.gif\" data-scroll=\"native\"><canvas width=\"75\" height=\"38\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*vD2u7I_a_uxs33qcdo2R6g.gif\" width=\"925\" height=\"484\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*vD2u7I_a_uxs33qcdo2R6g.gif\" /></div>\n</div>\n<figcaption>ng generate for adding a dashboard to your&nbsp;project</figcaption>\n</figure>\n<p id=\"9643\">Once you have run&nbsp;ng add @angular/material&nbsp;to add material to an existing application, you will also be able to generate 3 new starter components.</p>\n<p id=\"c5da\">&mdash;</p>\n<p id=\"33eb\">Material Sidenav</p>\n<p id=\"427e\">You can now generate a starter component including a toolbar with the app name and the side navigation. This component is responsive based on breakpoints.</p>\n<p id=\"6e37\">Run:</p>\n<p id=\"848f\">ng generate @angular/material:material-nav --name=my-nav</p>\n<p id=\"d219\">This will create this starter component:</p>\n<figure id=\"6bd6\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*PKi-6dOhlb61g8CM2JCx-Q.png\" data-width=\"3886\" data-height=\"2032\" data-action=\"zoom\" data-action-value=\"1*PKi-6dOhlb61g8CM2JCx-Q.png\" data-scroll=\"native\"><canvas width=\"75\" height=\"38\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*PKi-6dOhlb61g8CM2JCx-Q.png\" width=\"897\" height=\"469\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*PKi-6dOhlb61g8CM2JCx-Q.png\" /></div>\n</div>\n<figcaption>material-nav</figcaption>\n</figure>\n<p id=\"c9bb\">&mdash;</p>\n<p id=\"0b90\">Material Dashboard</p>\n<p id=\"7135\">You can now generate a starter dashboard component containing a dynamic grid list of cards.</p>\n<p id=\"71ea\">Run:</p>\n<p id=\"e562\">ng generate @angular/material:material-dashboard --name=my-dashboard</p>\n<p id=\"44b1\">This will create this starter component:</p>\n<figure id=\"561a\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*De1Vnm2m1yID_EL_xRYIyw.png\" data-width=\"3831\" data-height=\"2035\" data-action=\"zoom\" data-action-value=\"1*De1Vnm2m1yID_EL_xRYIyw.png\" data-scroll=\"native\"><canvas width=\"75\" height=\"38\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*De1Vnm2m1yID_EL_xRYIyw.png\" width=\"844\" height=\"448\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*De1Vnm2m1yID_EL_xRYIyw.png\" /></div>\n</div>\n<figcaption>material-dashboard</figcaption>\n</figure>\n<p id=\"4664\">&mdash;</p>\n<p id=\"100d\">Material Data Table</p>\n<p id=\"8ade\">You can generate a starter data table component that is pre-configured with a&nbsp;datasource&nbsp;for sorting and pagination.</p>\n<p id=\"6415\">Run:</p>\n<p id=\"326e\">ng generate @angular/material:material-table --name=my-table</p>\n<p id=\"3528\">This will create this starter component:</p>\n<figure id=\"c58b\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*2MO1hno7d30iTPIZ9CnBzw.png\" data-width=\"3828\" data-height=\"2045\" data-action=\"zoom\" data-action-value=\"1*2MO1hno7d30iTPIZ9CnBzw.png\" data-scroll=\"native\"><canvas width=\"75\" height=\"40\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*2MO1hno7d30iTPIZ9CnBzw.png\" width=\"854\" height=\"456\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*2MO1hno7d30iTPIZ9CnBzw.png\" /></div>\n</div>\n<figcaption>material-table</figcaption>\n</figure>\n<p id=\"92e9\">&mdash;</p>\n<p id=\"5bb5\"><a href=\"http://material.angular.io/guide/schematics\" target=\"_blank\" rel=\"noopener\" data-href=\"http://material.angular.io/guide/schematics\">Learn more about the available Angular Material Schematics</a>.</p>\n<h3 id=\"ae92\">CLI Workspaces</h3>\n<p id=\"9546\">CLI v6 now has support for workspaces containing multiple projects, such as multiple applications or libraries. CLI projects will now use&nbsp;angular.jsoninstead of&nbsp;.angular-cli.json&nbsp;for build and project configuration.</p>\n<p id=\"1f2a\">Each CLI workspace has projects, each project has targets, and each target can have configurations.</p>\n<figure id=\"0c68\">\n<div>\n<div>&nbsp;</div>\n<div data-scroll=\"native\"><canvas width=\"75\" height=\"75\"></canvas>\n<div><iframe src=\"https://blog.angular.io/media/b60ed2058fac047dda80ac32d3a1676a?postId=cc56b0efa7a4\" width=\"700\" height=\"250\" frameborder=\"0\" allowfullscreen=\"\" data-src=\"/media/b60ed2058fac047dda80ac32d3a1676a?postId=cc56b0efa7a4\" data-media-id=\"b60ed2058fac047dda80ac32d3a1676a\" data-thumbnail=\"https://i.embed.ly/1/image?url=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F165056%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07\"></iframe></div>\n</div>\n</div>\n</figure>\n<p id=\"645a\"><a href=\"https://github.com/angular/angular-cli/wiki/angular-workspace\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/angular-cli/wiki/angular-workspace\">Learn more about the new configuration file</a></p>\n<h3 id=\"4786\">Library Support</h3>\n<p id=\"ab1f\">One of the most requested features for our CLI has been support for creating and building libraries, and we are proud to introduce:</p>\n<p id=\"8dae\">ng generate library &lt;name&gt;</p>\n<figure id=\"748e\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*6uz18nxGzAtk5ftoDZv_iQ.gif\" data-width=\"1261\" data-height=\"660\" data-action=\"zoom\" data-action-value=\"1*6uz18nxGzAtk5ftoDZv_iQ.gif\" data-scroll=\"native\"><canvas width=\"75\" height=\"38\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*6uz18nxGzAtk5ftoDZv_iQ.gif\" width=\"883\" height=\"462\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*6uz18nxGzAtk5ftoDZv_iQ.gif\" /></div>\n</div>\n<figcaption>ng generate library within an existing&nbsp;project</figcaption>\n</figure>\n<p id=\"ae73\">This command will create a library project within your CLI workspace, and configure it for testing and for building.</p>\n<p id=\"2130\"><a href=\"https://github.com/angular/angular-cli/wiki/stories-create-library\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/angular/angular-cli/wiki/stories-create-library\">Learn more about creating libraries with the Angular CLI</a></p>\n<h3 id=\"ae48\">Tree Shakable Providers</h3>\n<p id=\"e50a\">To make your applications smaller, we&rsquo;ve moved from modules referencing services to services referencing modules. This allows us to only bundle services into your code base in modules where they are injected.</p>\n<p id=\"61fd\">Before</p>\n<figure id=\"a911\">\n<div>\n<div>&nbsp;</div>\n<div data-scroll=\"native\"><canvas width=\"75\" height=\"75\"></canvas>\n<div><iframe src=\"https://blog.angular.io/media/8b421b56fc3bf1b54d5281518b0f2fd4?postId=cc56b0efa7a4\" width=\"700\" height=\"250\" frameborder=\"0\" allowfullscreen=\"\" data-src=\"/media/8b421b56fc3bf1b54d5281518b0f2fd4?postId=cc56b0efa7a4\" data-media-id=\"8b421b56fc3bf1b54d5281518b0f2fd4\" data-thumbnail=\"https://i.embed.ly/1/image?url=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F165056%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07\"></iframe></div>\n</div>\n</div>\n</figure>\n<figure id=\"6df1\">\n<div>\n<div>&nbsp;</div>\n<div><iframe src=\"https://blog.angular.io/media/ffe4d140446378b62589683c2b7e1cb7?postId=cc56b0efa7a4\" width=\"700\" height=\"250\" frameborder=\"0\" allowfullscreen=\"\" data-media-id=\"ffe4d140446378b62589683c2b7e1cb7\"></iframe></div>\n</div>\n</figure>\n<p id=\"5881\">After</p>\n<p id=\"b2b0\">No references are needed in our NgModule.</p>\n<figure id=\"6767\">\n<div>\n<div>&nbsp;</div>\n<div data-scroll=\"native\"><canvas width=\"75\" height=\"75\"></canvas>\n<div><iframe src=\"https://blog.angular.io/media/87de693c7a8d23defb589c7c96b3d34f?postId=cc56b0efa7a4\" width=\"700\" height=\"250\" frameborder=\"0\" allowfullscreen=\"\" data-src=\"/media/87de693c7a8d23defb589c7c96b3d34f?postId=cc56b0efa7a4\" data-media-id=\"87de693c7a8d23defb589c7c96b3d34f\" data-thumbnail=\"https://i.embed.ly/1/image?url=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F165056%3Fs%3D400%26v%3D4&amp;key=a19fcc184b9711e1b4764040d3dc5c07\"></iframe></div>\n</div>\n</div>\n</figure>\n<p id=\"60c8\"><a href=\"https://angular.io/guide/dependency-injection\" target=\"_blank\" rel=\"noopener\" data-href=\"https://angular.io/guide/dependency-injection\">Read more about Dependency Injection</a></p>\n<h3 id=\"fbdd\">Animations Performance Improvements</h3>\n<p id=\"63c3\">We&rsquo;ve updated our implementation of Animations to no longer need the&nbsp;<a href=\"https://angular.io/guide/browser-support#enabling-polyfills\" target=\"_blank\" rel=\"noopener\" data-href=\"https://angular.io/guide/browser-support#enabling-polyfills\">web animations polyfill</a>. This means that you can remove this polyfill from your application and save approximately 47KB of bundle size, while increasing animations performance in Safari at the same time.</p>\n<h3 id=\"3448\">RxJS v6</h3>\n<p id=\"e2e5\">Angular has been updated to use v6 of RxJS. RxJS is an independent project that released v6 several weeks ago. RxJS v6 brings with it several major changes, along with a backwards compatibility package&nbsp;rxjs-compat&nbsp;that will keep your applications working.</p>\n<p id=\"9db9\">RxJS has been rearranged to make it more tree-shakable, ensuring that only the pieces of RxJS that you use are included in your production bundles.</p>\n<p id=\"ac68\">If you use&nbsp;ng update, your application should keep working, but you can&nbsp;<a href=\"https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md\" target=\"_blank\" rel=\"noopener\" data-href=\"https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md\">learn more about the 5.5 to 6.0 migration</a>.</p>\n<h3 id=\"cdea\">Long Term Support&nbsp;(LTS)</h3>\n<p id=\"06bd\">We are expanding our Long Term Support to all major releases.</p>\n<p id=\"2b98\">Previously we announced that only v4 and v6 would be LTS releases but in order to make updating from one major to the next easier, and give bigger projects more time to plan updates, we have decided to extend the long-term support to all major releases starting with v4.</p>\n<p id=\"272c\">Each major release will be supported for 18 months with around 6 months of active development followed by 12 months of critical bugfixes and security patches.</p>\n<p id=\"13e5\">Learn more about how&nbsp;<a href=\"https://angular.io/guide/releases\" target=\"_blank\" rel=\"noopener\" data-href=\"https://angular.io/guide/releases\">Angular versions and releases</a>.</p>\n<h3 id=\"6d14\">How to update to&nbsp;6.0.0</h3>\n<p id=\"2dc4\">Visit&nbsp;<a href=\"https://update.angular.io/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://update.angular.io\">update.angular.io</a>&nbsp;for information and guidance on updating your application.</p>\n<figure id=\"5929\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*HDecs3czt3cTRMaDu9yo0w.png\" data-width=\"974\" data-height=\"817\" data-action=\"zoom\" data-action-value=\"1*HDecs3czt3cTRMaDu9yo0w.png\" data-scroll=\"native\"><canvas width=\"75\" height=\"62\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*HDecs3czt3cTRMaDu9yo0w.png\" width=\"881\" height=\"739\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*HDecs3czt3cTRMaDu9yo0w.png\" /></div>\n</div>\n<figcaption>https://update.angular.io</figcaption>\n</figure>\n<p id=\"1b54\">The update generally follows 3 steps, and will take advantage of the new&nbsp;ng update&nbsp;tool.</p>\n<ol>\n<li id=\"d4dd\">Update @angular/cli</li>\n<li id=\"99e5\">Update your Angular framework packages</li>\n<li id=\"d816\">Update other dependencies</li>\n</ol>\n<p>&nbsp;</p>\n<p id=\"322b\">Making it easy for developers to stay up to date with the latest releases is extremely important to us, so let us know what you think about this release in the comments!</p>\n<h3>&nbsp;</h3>\n<h3 id=\"fb5b\">What about&nbsp;Ivy?</h3>\n<p>&nbsp;</p>\n<p id=\"ea41\"><a href=\"https://youtu.be/dIxknqPOWms?t=1360\" target=\"_blank\" rel=\"noopener\" data-href=\"https://youtu.be/dIxknqPOWms?t=1360\">At ng-conf we mentioned a new initiative called Ivy</a> &mdash; our next generation rendering pipeline. Ivy is currently under active development and is not part of the 6.0 release. We will announce an opt-in preview of Ivy as soon as it is ready in the coming months. Keep an eye on this blog for the latest information.</p>",
      "tags": [
        {
          "name": "angular 6.0"
        },
        {
          "name": "angular-cli"
        }
      ],
      "category": "Announcement",
      "subCategory": "Creating APIs",
      "allowComments": true
    },
    {
      "id": 5,
      "title": "Trip report from ngAtlanta",
      "author": "Derek Carter",
      "publicationDate": "2018-06-20T04:00:00.000Z",
      "summary": "Last month I had the opportunity to speak at the ngAtlanta conference where I covered major parts of Angular’s 2018 roadmap and shared what I think is an interesting research-based rationale for focusing on diversity and inclusion as a strategy for productivity. You can check out the slides or watch my entire talk on YouTube.",
      "content": "<p id=\"1e57\">I&rsquo;m frequently impressed with the imagination and quality of conferences in the Angular community, but I think Zack Chapple and the rest of the conference team set a new bar on diversity with women making up over 60% of the speakers and with other diversity aspects well represented. Beyond the speaker diversity, the show had amazing content and I had great conversations with Angular developers from all around the world.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"f476\">Feature Roadmap</h3>\n<p>&nbsp;</p>\n<p id=\"5dd4\">Meta-points aside, here&rsquo;s a few of the upcoming features I covered in our roadmap.</p>\n<p>&nbsp;</p>\n<p id=\"3351\">Bazel. Every developer at Google gets to use a consistently fast, reliable, multi-language build tool that is offered as an open source tool called Bazel. We&rsquo;ve been working with the Bazel team on making this an option for Angular developers to get the same benefits. We&rsquo;re now building Angular itself using Bazel and there are several early-adopters now starting to use it with their Angular apps. Complete details at&nbsp;<a href=\"https://g.co/ng/abc\" target=\"_blank\" rel=\"noopener\" data-href=\"https://g.co/ng/abc\">g.co/ng/abc</a>.</p>\n<p>&nbsp;</p>\n<p id=\"492b\">Schematics and&nbsp;ng update.&nbsp;We built the Angular CLI on a core technology called Schematics that lets anyone define custom templates and code transformations for use with the CLI. We&rsquo;re shipping a new Schematics-based feature in CLI v1.7 called&nbsp;ng update&nbsp;that automatically updates your project dependencies and makes automated version fixes. With Schematics, you don&rsquo;t have to wait for the CLI team to come up with features and you can build your own code transformations like&nbsp;ng update. Find out how in the&nbsp;<a href=\"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2\" target=\"_blank\" rel=\"noopener\" data-href=\"https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2\">Schematics blog post</a>.</p>\n<p>&nbsp;</p>\n<p id=\"d4f2\">Component Dev Kit.&nbsp;We offer a complete set of accessible, high performance, feature-rich components in the Angular Material library. But what if you don&rsquo;t use Material or you want a head start in building other components not offered there? This is where the CDK comes in. Providing the core functions we&rsquo;ve used to build Angular Material, you can now create your own components using our battle-tested feature sets for accessibility, i18n, RTL, overlays, and much more. Check out the&nbsp;<a href=\"https://blog.angular.io/a-component-dev-kit-for-angular-9f06e3b4b3b4\" target=\"_blank\" rel=\"noopener\" data-href=\"https://blog.angular.io/a-component-dev-kit-for-angular-9f06e3b4b3b4\">CDK blog post</a>&nbsp;for how to get started.</p>\n<p>&nbsp;</p>\n<p id=\"d61b\">Angular Elements.&nbsp;Want to let others embed your Angular components or even full apps in other apps written in vanilla JS or any other framework? Then you might like Angular Elements which lets you publish Angular components as Web Components that can be used anywhere. This is still in development, but we&rsquo;re already using it on angular.io to make dynamic rendering easier. Check out&nbsp;<a href=\"https://www.youtube.com/watch?v=vHI5C-9vH-E\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.youtube.com/watch?v=vHI5C-9vH-E\">Rob Wormald&rsquo;s talk</a>&nbsp;and this other&nbsp;<a href=\"https://medium.com/vincent-ogloblinsky/export-angular-components-as-custom-elements-with-angular-elements-a2a0bfcd7f8a\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/vincent-ogloblinsky/export-angular-components-as-custom-elements-with-angular-elements-a2a0bfcd7f8a\">Medium post</a>for full project goals and details.</p>\n<p>&nbsp;</p>\n<p id=\"611a\">Ivy Renderer.&nbsp;Love Angular but just wish it was smaller, easier to debug, and compiled faster? These are our goals with Angular&rsquo;s new renderer code-named Ivy. Its coming as a non-breaking change so you&rsquo;ll get it automatically in a future release by just staying on Angular&rsquo;s latest releases (which should be a breeze with&nbsp;ng update). We&rsquo;ve got a ways to go, but we&rsquo;re hopeful developers will be able to opt-in to a preview in the first half of this year. You can track our progress at&nbsp;<a href=\"http://ivy.angular.io/\" target=\"_blank\" rel=\"noopener\" data-href=\"http://ivy.angular.io\">ivy.angular.io</a>.</p>\n<figure id=\"4ba5\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*5_9quY7GKJf-VJNuhZSaeQ.png\" data-width=\"1026\" data-height=\"551\" data-action=\"zoom\" data-action-value=\"1*5_9quY7GKJf-VJNuhZSaeQ.png\" data-scroll=\"native\"><canvas width=\"75\" height=\"40\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*5_9quY7GKJf-VJNuhZSaeQ.png\" width=\"680\" height=\"365\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*5_9quY7GKJf-VJNuhZSaeQ.png\" /></div>\n</div>\n<figcaption>Ivy Renderer&nbsp;Goals</figcaption>\n</figure>\n<p id=\"9fcf\">And more!&nbsp;Beyond these features, you can track all that we&rsquo;re aiming for in our next release of Angular in our&nbsp;<a href=\"http://v6.angular.io/\" target=\"_blank\" rel=\"noopener\" data-href=\"http://v6.angular.io\">milestones on GitHub</a>.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"124b\">Final Thoughts</h3>\n<p>&nbsp;</p>\n<p id=\"d452\">The Angular team values applications users love to use, applications developers love to build, and a community where everyone feels welcome. I hope that ngAtlanta set a new standard for making everyone feel welcome with their emphasis on diversity and inclusiveness and that this is something everyone just ends up expecting as a given.</p>\n<figure id=\"affb\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*Yyn8MuKGU29U8dUKB1JB5A.jpeg\" data-width=\"5451\" data-height=\"2129\" data-action=\"zoom\" data-action-value=\"1*Yyn8MuKGU29U8dUKB1JB5A.jpeg\" data-scroll=\"native\"><canvas width=\"75\" height=\"28\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*Yyn8MuKGU29U8dUKB1JB5A.jpeg\" width=\"797\" height=\"311\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*Yyn8MuKGU29U8dUKB1JB5A.jpeg\" /></div>\n</div>\n<figcaption>Back of the packed room at ngAtlanta</figcaption>\n</figure>\n<p>&nbsp;</p>\n<p id=\"cd6a\">If you go to conferences this year that aren&rsquo;t doing quite as well as ngAtlanta did in diversity, I urge you to send a message to the conference organizers pointing at ngAtlanta&rsquo;s success as a beacon of what&rsquo;s possible. And if they don&rsquo;t get the message for future conferences, vote with your feet and go to conferences that do.</p>\n<p>&nbsp;</p>\n<p id=\"66d5\">I know that I will.</p>",
      "tags": [
        {
          "name": "javascript"
        },
        {
          "name": "frontend development"
        },
        {
          "name": "web development"
        },
        {
          "name": "angular"
        },
        {
          "name": "diversity"
        }
      ],
      "category": "Announcement",
      "subCategory": "Creating APIs",
      "allowComments": true
    },
    {
      "id": 6,
      "title": "Customizing your portal",
      "author": "Derek Carter",
      "publicationDate": "2018-06-20T04:00:00.000Z",
      "summary": "You can customize the appearance of the developer portal to match your company theme, to add new content areas to the portal, or to change the layout of any page on the portal. Much of this configuration requires a working knowledge of Drupal. However, there is documentation that describes some of the basic tasks that you might want to perform to customize your portal. View more information about customizing your developer portals at www.apigee.com.",
      "content": "<p style=\"margin: 0px 0px 15px; padding: 0px; text-align: justify; font-family: 'Open Sans', Arial, sans-serif;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque faucibus nunc eget sapien auctor gravida. Vestibulum aliquam felis mi, finibus bibendum ligula ullamcorper sit amet. Suspendisse in ligula laoreet, ornare massa id, pulvinar dui. Sed quis euismod nulla, ut pellentesque quam. Sed lacinia mattis lacus, ac euismod tellus convallis vel. Fusce dapibus dui at consectetur bibendum. Nam aliquet placerat nulla eget rhoncus. Nullam interdum, metus eu rutrum bibendum, felis libero gravida augue, ac accumsan orci ante a felis.</p>\n<p style=\"margin: 0px 0px 15px; padding: 0px; text-align: justify; font-family: 'Open Sans', Arial, sans-serif;\">Suspendisse in dui erat. Vestibulum ac vehicula purus. Quisque enim sem, ultricies sed pretium eu, interdum vel mi. Donec lacus lorem, hendrerit sit amet pharetra sed, dapibus vitae arcu. Pellentesque varius eget felis id porttitor. Etiam sapien dui, ullamcorper at enim eu, placerat sollicitudin ligula. Nullam maximus consequat turpis non rutrum. Aenean id lacus eget arcu dapibus ultricies et in arcu. Cras ac cursus odio. Maecenas ornare tellus ac risus porta, sed vehicula nulla vulputate. Aenean dolor elit, vehicula a eros vitae, finibus accumsan justo. Duis ut fermentum augue, imperdiet lobortis lorem. Ut vestibulum mauris sit amet arcu finibus scelerisque. Curabitur eget nisl pharetra lacus pharetra euismod. Donec eget dapibus quam. Curabitur quis dolor justo.</p>\n<p style=\"margin: 0px 0px 15px; padding: 0px; text-align: justify; font-family: 'Open Sans', Arial, sans-serif;\">Etiam sed enim vel turpis laoreet tincidunt. Morbi non vehicula eros, ac mattis eros. Praesent vel quam et dolor vulputate porttitor sit amet in est. Aliquam erat volutpat. Aliquam pulvinar feugiat interdum. Pellentesque orci libero, suscipit a tempus sit amet, sollicitudin id sapien. Etiam tincidunt et eros at fermentum. Aenean lacinia dui sed porttitor interdum. Etiam laoreet quam quis tellus tincidunt, non interdum massa maximus. In rutrum ligula velit, id aliquam orci laoreet sit amet. Etiam eleifend vitae nisi sed gravida. Nulla porta suscipit dolor eu tristique. Suspendisse neque massa, venenatis ut finibus id, suscipit eu massa.</p>\n<p style=\"margin: 0px 0px 15px; padding: 0px; text-align: justify; font-family: 'Open Sans', Arial, sans-serif;\">Nunc non elementum lacus. Vivamus lacinia justo ipsum. Donec mattis dolor eget est rhoncus facilisis. Aliquam iaculis justo ex, at hendrerit dui vestibulum quis. Praesent sed viverra lacus. Nullam mattis, purus sit amet pretium aliquam, nibh diam pellentesque lectus, id vulputate lectus diam vel nulla. Curabitur facilisis tincidunt ligula, eget tempus quam tincidunt sed. Morbi congue eros vel laoreet sodales. Vivamus ut vulputate sem. Sed faucibus facilisis ante eget maximus. Vivamus et neque vitae massa porttitor faucibus ut a felis. Donec vel semper dolor. In convallis convallis massa eu euismod.</p>\n<p style=\"margin: 0px 0px 15px; padding: 0px; text-align: justify; font-family: 'Open Sans', Arial, sans-serif;\">Integer congue vehicula nisi, eu ultrices dolor lobortis vitae. Aliquam in ligula nec metus scelerisque maximus. Phasellus condimentum condimentum viverra. Maecenas a tristique nisi. Donec volutpat, risus non posuere lacinia, massa nunc porttitor est, vitae imperdiet velit nulla a lacus. Curabitur urna sapien, elementum vel fermentum sit amet, suscipit id ante. Nunc orci erat, consectetur non ultrices nec, tincidunt eu arcu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec eu libero in libero tempor hendrerit consectetur id sem. Praesent pretium enim dolor, sit amet elementum nisl viverra tempor. Cras hendrerit nibh sed lectus tempus, a tincidunt tellus dapibus. Fusce eget dui ac quam finibus molestie at et nunc. Aenean hendrerit tellus ligula. Praesent tincidunt massa eget arcu convallis sagittis sit amet eu velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque quis tempus nibh.</p>",
      "tags": [
        {
          "name": "portal"
        },
        {
          "name": "customization"
        }
      ],
      "category": "Documentation",
      "subCategory": "Documentation Landing Page",
      "allowComments": true
    },
    {
      "id": 7,
      "title": "Portal Start Up Guide",
      "author": "Derek Carter",
      "publicationDate": "2018-06-20T04:00:00.000Z",
      "summary": "The developer portal is a template portal, designed as a base that you can easily customize to meet your specific requirementsYour customized developer portal should educate developers about your API—what it is and how it’s used. It should also enable you to manage developer use of your API. This could include authorizing developers to use your API, giving developers an easy way to create apps that use your API products, assigning developers specific roles and permissions related to the API, or revoking developer access to the API as necessary. Beyond that, your developer portal can serve as the focal point for community activity, where developers can contribute API-related content to social media repositories such as blogs and forums. View more information about developer portals at apigee.com",
      "content": "<p>&nbsp;</p>\n<p>&nbsp;</p>",
      "tags": [
        {
          "name": "getting started"
        },
        {
          "name": "starting"
        },
        {
          "name": "api development"
        }
      ],
      "category": "Documentation",
      "subCategory": "Creating APIs",
      "allowComments": true
    },
    {
      "id": 8,
      "title": "How to Build a Simple Blog Using Node.js",
      "author": "C5 Test01",
      "publicationDate": "2018-06-22T04:00:00.000Z",
      "summary": "In this tutorial I’m going to show you how to create a simple blog using Node.js and Cosmic JS. This is going to be the fastest and most light-weight blog you have ever created. Let’s get started.",
      "content": "<h3 id=\"8f97\">TL;DR</h3>\n<p id=\"f2b3\"><a href=\"https://cosmicjs.com/apps/simple-blog/demo\" target=\"_blank\" rel=\"noopener\" data-href=\"https://cosmicjs.com/apps/simple-blog/demo\">View the demo</a><br /><a href=\"https://cosmicjs.com/apps/simple-blog\" target=\"_blank\" rel=\"noopener\" data-href=\"https://cosmicjs.com/apps/simple-blog\">Install the Simple Blog App on Cosmic JS</a><br /><a href=\"https://github.com/cosmicjs/simple-blog\" target=\"_blank\" rel=\"noopener noreferrer noopener noopener\" data-href=\"https://github.com/cosmicjs/simple-blog\">View the codebase on GitHub</a></p>\n<h3>&nbsp;</h3>\n<h3 id=\"a66e\">Getting Started</h3>\n<p id=\"70d9\">Make sure that you have&nbsp;<a href=\"https://cosmicjs.com/blog/Node.js\" target=\"_blank\" rel=\"noopener\" data-href=\"https://cosmicjs.com/blog/Node.js\">Node.js</a>&nbsp;and NPM installed on your machine, if not,<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"https://nodejs.org/en/\">visit the Node.js website</a>&nbsp;to install the latest version.</p>\n<p id=\"bb17\">Make sure you have&nbsp;<a href=\"https://yarnpkg.com/en/\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"https://yarnpkg.com/en/\">Yarn</a>&nbsp;installed globally:</p>\n<pre id=\"4a4b\">npm install yarn -g</pre>\n<p id=\"ab70\">Let&rsquo;s start by creating a folder for our app. In your favorite terminal run the following commands:</p>\n<pre id=\"0b5c\">mkdir simple-blog<br />cd simple-blog</pre>\n<p id=\"5165\">Now let&rsquo;s add a package.json file to import all of our dependencies for our app:</p>\n<pre id=\"eb8a\">vim package.json</pre>\n<p id=\"704f\">Add the following to our package.json file:</p>\n<pre id=\"5ea1\">{<br />  \"dependencies\": {<br />    \"cosmicjs\": \"^2.39.0\",<br />    \"express\": \"^4.15.2\",<br />    \"hogan-express\": \"^0.5.2\",<br />    \"nodemon\": \"^1.11.0\"<br />  },<br />  \"scripts\": {<br />    \"start\": \"node app.js\",<br />    \"development\": \"nodemon app.js\"<br />  }<br />}</pre>\n<p id=\"559e\">It&rsquo;s a pretty light dependency list for a pretty light app. So what we will install is:</p>\n<p id=\"03a4\">1. The Cosmic JS Node Module to get our content from our Cosmic JS Bucket.<br />2. Express for our web app framework<br />3. Hogan for our template views<br />4. Nodemon for development</p>\n<p id=\"32a8\">Our scripts are necessary for starting our app in production and development.</p>\n<p id=\"8d9c\">Run the following command to install our dependencies:</p>\n<pre id=\"330d\">yarn</pre>\n<h3>&nbsp;</h3>\n<h3 id=\"8d88\">Building Our&nbsp;Blog</h3>\n<p id=\"9c55\">Next, let&rsquo;s begin building our blog pages. Create a file titled app.js:</p>\n<pre id=\"9f20\">vim app.js</pre>\n<p id=\"78d5\">and add the following to app.js:</p>\n<pre id=\"a668\">const express = require('express')<br />const app = express()<br />const hogan = require('hogan-express')<br />const http_module = require('http')<br />const http = http_module.Server(app)<br />app.engine('html', hogan)<br />app.set('port', (process.env.PORT || 3000))<br />app.use('/', express.static(__dirname + '/public/'))<br />const Cosmic = require('cosmicjs')<br />const helpers = require('./helpers')<br />const bucket_slug = process.env.COSMIC_BUCKET || 'simple-blog-website'<br />const read_key = process.env.COSMIC_READ_KEY<br />const partials = {<br />  header: 'partials/header',<br />  footer: 'partials/footer'<br />}<br />app.use('/', (req, res, next) =&gt; {<br />  res.locals.year = new Date().getFullYear()<br />  next()<br />})<br />// Home<br />app.get('/', (req, res) =&gt; {<br />  Cosmic.getObjects({ bucket: { slug: bucket_slug, read_key: read_key } }, (err, response) =&gt; {<br />    const cosmic = response<br />    if (cosmic.objects.type.posts) {<br />      cosmic.objects.type.posts.forEach(post =&gt; {<br />        const friendly_date = helpers.friendlyDate(new Date(post.created_at))<br />        post.friendly_date = friendly_date.month + ' ' + friendly_date.date<br />      })<br />    } else {<br />      cosmic.no_posts = true<br />    }<br />    res.locals.cosmic = cosmic<br />    res.render('index.html', { partials })<br />  })<br />})<br />http.listen(app.get('port'), () =&gt; {<br />  console.info('==&gt; 🌎  Go to http://localhost:%s', app.get('port'));<br />})</pre>\n<p>&nbsp;</p>\n<p id=\"f46c\">There are a few things happening here:</p>\n<p id=\"a629\">1. We are importing our essential modules: Express, Cosmic JS, setting our PORT dynamically, etc.<br />2. We are pointing to some partials: header and footer, you can&nbsp;<a href=\"https://github.com/cosmicjs/simple-blog/tree/master/views/partials\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"https://github.com/cosmicjs/simple-blog/tree/master/views/partials\">reference these partials from the codebase on GitHub</a>.<br />3. We view our app home page (&lsquo;/&rsquo;) and query our Cosmic JS Bucket for Post Objects, set the friendly date, then return the index.html template.<br />4. We are also adding our data to this page in the form of a global data store: cosmic. This data structure makes our template implementation super intuitive.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"a67b\">Adding Our Home Page Template Variables</h3>\n<p id=\"1abc\">This part of the process is the most fun because it shows you the power of Cosmic JS combined with a declarative, logic-less template system like&nbsp;<a href=\"http://mustache.github.io/\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"http://mustache.github.io/\">Mustache</a>. Let&rsquo;s create a folder called views and add our index.html file:</p>\n<pre id=\"ebbe\">mkdir views<br />cd views<br />vim index.html</pre>\n<p id=\"ada5\">Add the following to index.html:</p>\n<pre id=\"5f3c\">{{&gt; header }}<br />  &lt;main class=\"container\"&gt;<br />    {{# cosmic.objects.type.posts }}<br />      &lt;div class=\"card\" data-href=\"/{{ slug }}\"&gt;<br />        {{# metadata.hero.imgix_url }}<br />          &lt;div class=\"blog-post-hero blog-post-hero--short\" style=\"background-image: url({{ metadata.hero.imgix_url }})\"&gt;&lt;/div&gt;<br />        {{/ metadata.hero.imgix_url }}<br />        &lt;div class=\"card-padding\"&gt;<br />          &lt;h2 class=\"blog__title blog__title--small\"&gt;<br />            &lt;a href=\"/{{ slug }}\"&gt;{{ title }}&lt;/a&gt;<br />          &lt;/h2&gt;<br />          &lt;div class=\"blog__author\"&gt;<br />            &lt;div class=\"blog__author-image\" style=\"background-image: url({{ metadata.author.metadata.image.imgix_url }}?w=100)\"&gt;&lt;/div&gt;<br />            &lt;div class=\"blog__author-title\"&gt;by &lt;a href=\"/author/{{ metadata.author.slug }}\"&gt;{{ metadata.author.title }}&lt;/a&gt; on {{ friendly_date }}&lt;/div&gt;<br />            &lt;div class=\"clearfix\"&gt;&lt;/div&gt;<br />          &lt;/div&gt;<br />          &lt;div class=\"blog__teaser droid\"&gt;{{{ metadata.teaser }}}&lt;/div&gt;<br />          &lt;div class=\"blog__read-more\"&gt;<br />            &lt;a href=\"/{{ slug }}\"&gt;Read more...&lt;/a&gt;<br />          &lt;/div&gt;<br />        &lt;/div&gt;<br />      &lt;/div&gt;  <br />    {{/ cosmic.objects.type.posts }}<br />  &lt;/main&gt;<br />{{&gt; footer }}</pre>\n<p>&nbsp;</p>\n<p id=\"76b2\">What&rsquo;s happening here?<br />1. We pull in our header file with the Mustache template variable.<br />2. We pull in our Cosmic data using the Mustache variable {{ cosmic }} which has everything we need to layout our page&rsquo;s dynamic data.<br />3. We are looping through our {{ cosmic.objects.type.posts }} and rolling out our blog posts.</p>\n<p id=\"2c88\">What I like about this approach is that the template is completely logic-less aside from some boolean queries and array looping. It really does a great job of keeping our logic separate from our presentation (thanks&nbsp;<a href=\"https://twitter.com/defunkt\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"https://twitter.com/defunkt\">Chris Wanstrath</a>!)</p>\n<p id=\"0c25\">If you want to build out the rest of the application,&nbsp;<a href=\"https://github.com/cosmicjs/simple-blog\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"https://github.com/cosmicjs/simple-blog\">clone the GitHub repo</a>&nbsp;and follow the README instructions.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"6c72\">Conclusion</h3>\n<p id=\"4378\">This is the abridged version of the&nbsp;<a href=\"https://cosmicjs.com/apps/simple-blog\" target=\"_blank\" rel=\"noopener\" data-href=\"https://cosmicjs.com/apps/simple-blog\">Simple Blog app</a>&nbsp;available for download in the&nbsp;<a href=\"https://cosmicjs.com/apps\" target=\"_blank\" rel=\"noopener\" data-href=\"https://cosmicjs.com/apps\">Cosmic JS Apps page</a>. The full codebase includes a single post page view as well as a page dedicated to each author&rsquo;s posts.&nbsp;<a href=\"https://github.com/cosmicjs/simple-blog\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"https://github.com/cosmicjs/simple-blog\">View the full codebase on GitHub</a>&nbsp;and deploy this app in a few clicks from your Cosmic JS dashboard by&nbsp;<a href=\"https://cosmicjs.com/apps/simple-blog\" target=\"_blank\" rel=\"noopener\" data-href=\"https://cosmicjs.com/apps/simple-blog\">installing the app</a>&nbsp;to your Cosmic JS Bucket.</p>\n<p id=\"40cf\">I hope you enjoyed this tutorial, if you have any questions&nbsp;<a href=\"https://twitter.com/cosmic_js\" target=\"_blank\" rel=\"noopener noreferrer noopener\" data-href=\"https://twitter.com/cosmic_js\">reach out to us on Twitter</a>&nbsp;and&nbsp;<a href=\"https://cosmicjs.com/community\" target=\"_blank\" rel=\"noopener\" data-href=\"https://cosmicjs.com/community\">join our community on Slack</a>.</p>",
      "tags": [
        {
          "name": "nodejs"
        },
        {
          "name": "blog"
        },
        {
          "name": "github"
        },
        {
          "name": "slack"
        },
        {
          "name": "javascript"
        }
      ],
      "category": "Announcement",
      "subCategory": null,
      "allowComments": true
    },
    {
      "id": 9,
      "title": "UX Design for Developers",
      "author": "C5 Test01",
      "publicationDate": "2018-06-22T04:00:00.000Z",
      "summary": "What are User Goals, Task Lists, User Flows, Empathy Maps & Journey Maps? How do you use these to make User Personas? How do you use all these to make more usable and delightful products? Learn all this in this short, 8-minute guide.",
      "content": "<div>\n<p id=\"f61e\">As a web or mobile developer, you may have often wondered what is it really that the UX Designers do? How do you get hands on this&nbsp;magic dust&nbsp;that makes some companies&rsquo; products noticeably easier and fun to use? How do you build products with great usability when you don&rsquo;t have the budget of hiring a UX Designer for your solo side-project?</p>\n<p id=\"ad58\">I wrote this guide to explain what goes on in a UX Designer&rsquo;s mind when they prototype products &mdash; so you can think like one too! Let&rsquo;s get started.</p>\n<h3 id=\"3ab7\">User Goals</h3>\n<p id=\"8211\">A user goal is what the user is trying to achieve. For freeCodeCamp, the user&rsquo;s goal is to learn web programming so that they can start making web apps. For Uber&rsquo;s user, the goal is to find a cab to get to a destination. For Fandango&rsquo;s user, the goal is to book a movie ticket. And so on.</p>\n<p id=\"b0e0\">It&rsquo;s important to identify the user&rsquo;s goals before we start designing anything. What is the user&rsquo;s problem we are trying to solve? What does the user want to do here? What&rsquo;s the primary job the user is hiring your product for?</p>\n<p id=\"9dfd\">There are usually multiple user goals within an application: we will break each of these goals into a list of tasks that the user must accomplish to achieve their goal.</p>\n<figure id=\"0781\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*mmn8MgysZRLZMe5MELzk4A.png\" data-width=\"364\" data-height=\"111\" data-scroll=\"native\"><canvas width=\"75\" height=\"22\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*mmn8MgysZRLZMe5MELzk4A.png\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*mmn8MgysZRLZMe5MELzk4A.png\" /></div>\n</div>\n</figure>\n<h3 id=\"9b37\">Task Lists</h3>\n<p id=\"51e6\">Once you&rsquo;ve identified a user goal, you can start breaking it down into a list of tasks that the user must accomplish to complete the goal successfully. For finding an Uber, a task list would look as follows:</p>\n<ol>\n<li id=\"4715\">Open the Uber app.</li>\n<li id=\"4bc0\">Enter a destination in the&nbsp;&ldquo;Where to?&rdquo;&nbsp;box on top.</li>\n<li id=\"1b8d\">Pick the type of Uber you want (Pool, uberX, SELECT, BLACK, uberXL, SUV, etc.)</li>\n<li id=\"a6f7\">Make sure the Payment method is the one you desire to pay with.</li>\n<li id=\"7bcf\">Press the Confirm button.</li>\n<li id=\"ceaa\">Confirm the pickup spot.</li>\n<li id=\"fcb7\">Wait for the car, take the ride, get dropped off at your destination.</li>\n<li id=\"ccb8\">Review and tip.</li>\n</ol>\n<p id=\"0891\">Task lists look very simple at the face of it but can end up becoming complicated and confusing. For instance, Uber made a conscious decision to add a Confirm pickup spot step (Step 6) even though they can be reasonably confident that the GPS would pick your location accurately. Additionally, some tasks can be done in any order, some tasks may require other tasks to be done before them (step 7), or some tasks may even be optional (step 8).</p>\n<figure id=\"195a\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*394erxZnWXBXRBtnw0ZvAw.png\" data-width=\"591\" data-height=\"115\" data-scroll=\"native\"><canvas width=\"75\" height=\"13\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*394erxZnWXBXRBtnw0ZvAw.png\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*394erxZnWXBXRBtnw0ZvAw.png\" /></div>\n</div>\n</figure>\n<h3 id=\"fde0\">User Flow&nbsp;Diagrams</h3>\n<p id=\"2b9f\">Given a task list, you can convert it into a User Flow Diagram to show how a user will move through your app. User Flow Diagrams help you reason about how the application will work before you start any prototyping/building. It&rsquo;s the same as the task list, except it&rsquo;s a flowchart that uses symbols and arrows to communicate the task list more visually.</p>\n<p id=\"c963\">Here are two User Flow diagrams comparing Uber to Grab:</p>\n<figure id=\"6bfe\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"0*BAYRmB6efvkFuufO\" data-width=\"600\" data-height=\"771\" data-scroll=\"native\"><canvas width=\"58\" height=\"75\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/0*BAYRmB6efvkFuufO\" data-src=\"https://cdn-images-1.medium.com/max/1600/0*BAYRmB6efvkFuufO\" /></div>\n</div>\n<figcaption>(<a href=\"http://zoe4meii.com/project/ride-hailing-app\" target=\"_blank\" rel=\"noopener\" data-href=\"http://zoe4meii.com/project/ride-hailing-app\">Source</a>)</figcaption>\n</figure>\n<h3 id=\"f531\">Empathy Map</h3>\n<p id=\"424c\">An empathy map shows you how individual users feel, think and talk about the experience of using your product. It is the beginning of creating a user persona, which we will discuss near the end of this guide.</p>\n<p id=\"6762\">Empathy maps are used to collect and organize data about individual users. Later, we can go back to them to look for behavioral patterns, and aggregate them eventually into user personas.</p>\n<p id=\"4602\">Here&rsquo;s how you make an empathy map:</p>\n<ol>\n<li id=\"52f7\">Split a piece of paper into four quadrants.</li>\n<li id=\"cb44\">Label them Seeing, Thinking &amp; Feeling, Hearing and Saying.</li>\n<li id=\"c67a\">Interview your users, and during the interview fill out these quadrants as you observe their interaction with the prototype/product, or the problem as they encounter it in a real setting.</li>\n</ol>\n</div>\n<div>\n<figure id=\"b2ca\" data-scroll=\"native\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*Qu-AZ1S9JDrJx9qH63ydKw.png\" data-width=\"1200\" data-height=\"675\" data-action=\"zoom\" data-action-value=\"1*Qu-AZ1S9JDrJx9qH63ydKw.png\" data-scroll=\"native\"><canvas width=\"75\" height=\"41\"></canvas><img src=\"https://cdn-images-1.medium.com/max/2000/1*Qu-AZ1S9JDrJx9qH63ydKw.png\" data-src=\"https://cdn-images-1.medium.com/max/2000/1*Qu-AZ1S9JDrJx9qH63ydKw.png\" /></div>\n</div>\n<figcaption>Empathy map for a user who is trying to record and upload a video in 2004.&nbsp;(<a href=\"https://medium.com/@harrybr/how-to-run-an-empathy-user-journey-mapping-workshop-813f3737067\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/@harrybr/how-to-run-an-empathy-user-journey-mapping-workshop-813f3737067\">Source</a>)</figcaption>\n</figure>\n</div>\n<div>\n<p id=\"9ecf\">Once you collect enough empathy maps for individual users (I recommend at least 3 to 5), you&rsquo;ll start to see patterns &mdash; these patterns inform User Personas that you&rsquo;ll create later.</p>\n<h4 id=\"81a2\">User Journey&nbsp;Maps</h4>\n<p id=\"cc4b\">A User Journey Map is very similar in concept to an Empathy Map, except it shows how a user is feeling and what they&rsquo;re thinking about at different points in time while using your product.</p>\n<p id=\"c844\">In essence, it&rsquo;s a series of Empathy maps on a timeline as the user progresses through a user flow in your product. For example:</p>\n</div>\n<div>\n<figure id=\"7677\" data-scroll=\"native\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*CK7wEl_Y1v9XxSN-1kDDdQ.png\" data-width=\"1200\" data-height=\"675\" data-action=\"zoom\" data-action-value=\"1*CK7wEl_Y1v9XxSN-1kDDdQ.png\" data-scroll=\"native\"><canvas width=\"75\" height=\"41\"></canvas><img src=\"https://cdn-images-1.medium.com/max/2000/1*CK7wEl_Y1v9XxSN-1kDDdQ.png\" data-src=\"https://cdn-images-1.medium.com/max/2000/1*CK7wEl_Y1v9XxSN-1kDDdQ.png\" /></div>\n</div>\n<figcaption>User Journey map for a user who is trying to record and upload a video in 2004.&nbsp;(<a href=\"https://medium.com/@harrybr/how-to-run-an-empathy-user-journey-mapping-workshop-813f3737067\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/@harrybr/how-to-run-an-empathy-user-journey-mapping-workshop-813f3737067\">Source</a>)</figcaption>\n</figure>\n</div>\n<div>\n<p id=\"a39b\">In the User Journey map above, you&rsquo;ll notice that different stages of the experience are on the X-axis, and we are trying to identify various aspects of the user&rsquo;s experience on the Y-axis.</p>\n<p id=\"04c1\">There are two types of user journey maps:</p>\n<ol>\n<li id=\"5613\">retrospective maps:&nbsp;where you map out how users currently do stuff based on research findings (like the map above)</li>\n<li id=\"24e3\">prospective maps:&nbsp;where you map how you expect users to behave with your new product idea or with your redesigned flow in an existing product.</li>\n</ol>\n<h3 id=\"71d5\">User Personas</h3>\n<p id=\"db3d\">After creating Empathy maps and User Journey maps, the next step is to look for patterns in your observations and create a few personas for your project.</p>\n<h4 id=\"a6bc\">Creating User&nbsp;Personas</h4>\n<p id=\"d9db\">First of all, let&rsquo;s nail down what personas or profiles are&nbsp;NOT:</p>\n<ul>\n<li id=\"acce\">Personality types</li>\n<li id=\"7d65\">Demographics</li>\n<li id=\"ea16\">Characters in your &ldquo;brand story&rdquo;</li>\n<li id=\"abd6\">Stereotypes based on your experience</li>\n<li id=\"c472\">Shallow or 1-dimensional</li>\n<li id=\"7fc2\">Concepts</li>\n<li id=\"d301\">Predictions</li>\n</ul>\n<p id=\"b433\">So what is a user persona or profile?</p>\n<p id=\"496a\">A user persona describes the goals, expectations, motivations, and behavior of real people. Why do they come to your site? What are they looking for? What makes them nervous? And so on.</p>\n<p id=\"e1b6\">All the information you need should be in your research and data. If you can&rsquo;t back it up with research, it&rsquo;s not a good sign and you should talk more to your users.</p>\n<h4 id=\"5be9\">Example of a bad&nbsp;persona</h4>\n<figure id=\"7071\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*EUJr3RrpqXrmqG02s7GMmQ.png\" data-width=\"300\" data-height=\"300\" data-scroll=\"native\"><canvas width=\"75\" height=\"75\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*EUJr3RrpqXrmqG02s7GMmQ.png\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*EUJr3RrpqXrmqG02s7GMmQ.png\" /></div>\n</div>\n</figure>\n<blockquote id=\"50fa\">Persona A is a female, between the ages of 35&ndash;45 with an above average income and education. They have at least one child and own at least one new vehicle. They are outgoing and career-oriented and tend to be right-brain thinkers.</blockquote>\n<p id=\"9df1\">Why it&rsquo;s bad:&nbsp;That might be great if you&rsquo;re selling ads, but as far as UX goes, that profile is not useful. Why? Because it doesn&rsquo;t allow you to say &ldquo;no&rdquo; to any feature ideas. What sort of features does a female between 35&ndash;45 need? It could be anything!</p>\n<h4 id=\"f807\">Example of a useful&nbsp;persona:</h4>\n<figure id=\"07d3\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*VEecutCfnIz5I4wBOmOoKQ.png\" data-width=\"300\" data-height=\"300\" data-scroll=\"native\"><canvas width=\"75\" height=\"75\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*VEecutCfnIz5I4wBOmOoKQ.png\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*VEecutCfnIz5I4wBOmOoKQ.png\" /></div>\n</div>\n</figure>\n<blockquote id=\"0dbf\">Persona B is an experienced manager, mostly interested in one or two areas of expertise. They visit often, but they are pressed for time, so they focus on &ldquo;collecting&rdquo; content to read on the weekends. They tend to be prolific social media sharers, mostly to Twitter and LinkedIn. They consider themselves thought-leaders, so the public image is important.</blockquote>\n<p id=\"98a4\">Why it&rsquo;s useful:&nbsp;Now you have a lot of information to use! You know that fluffy content will not be popular, self-curating will be a big deal and you have a basis for setting up content categories. They need easy access to sharing, and only certain types of social sharing will be relevant. You also get to say &ldquo;no&rdquo; to a Facebook campaign, because these users don&rsquo;t spend time there, and digest emails will be better than frequent notifications because these people are already pressed for time.</p>\n<h4 id=\"756a\">Final few&nbsp;tips</h4>\n<ul>\n<li id=\"2518\">Think of &ldquo;Ideal&rdquo; Users. Several of them!</li>\n<li id=\"b395\">When you think about features, think of the most valuable version of the users you see in real life. You&rsquo;re not trying to support the current behavior; you&rsquo;re trying to&nbsp;nudge&nbsp;those users toward an &ldquo;ideal&rdquo; version of themselves.</li>\n<li id=\"1b18\">Remember that all users are not alike! You will probably have a few different behavioral groups, and they all deserve a good profile.</li>\n</ul>\n<p id=\"e222\">Here&rsquo;s an example of a real persona:</p>\n<figure id=\"b2dc\">\n<div>\n<div>&nbsp;</div>\n<div data-image-id=\"1*JPwgeIUZTlvZ3PWbowxllg.jpeg\" data-width=\"960\" data-height=\"622\" data-action=\"zoom\" data-action-value=\"1*JPwgeIUZTlvZ3PWbowxllg.jpeg\" data-scroll=\"native\"><canvas width=\"75\" height=\"47\"></canvas><img src=\"https://cdn-images-1.medium.com/max/1600/1*JPwgeIUZTlvZ3PWbowxllg.jpeg\" data-src=\"https://cdn-images-1.medium.com/max/1600/1*JPwgeIUZTlvZ3PWbowxllg.jpeg\" /></div>\n</div>\n<figcaption>(<a href=\"http://www.christinanghiem.com/images/persona-01.jpg\" target=\"_blank\" rel=\"noopener\" data-href=\"http://www.christinanghiem.com/images/persona-01.jpg\">Source</a>)</figcaption>\n</figure>\n<h3 id=\"72c2\">What&rsquo;s next?</h3>\n<p id=\"67c4\">This is where the rubber hits the road. Armed with your user personas, you will have a better understanding of your user. You can now start&nbsp;<a href=\"https://medium.freecodecamp.org/a-beginners-guide-to-rapid-prototyping-71e8722c17df\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.freecodecamp.org/a-beginners-guide-to-rapid-prototyping-71e8722c17df\">prototyping</a>the User Flows, and you&rsquo;ll do a much better job than before because you now have much more empathy for your users. This is the core of UX Design, and going through the above exercise will help you feel connected to them in a way that code and features cannot.</p>\n<p id=\"0aa8\">Next time, when you look at the list of possible features you can add to your product, first think of the persona you created, and think about which features enhance their experience and make them delightful. Having a persona will enable you not to get distracted by the implementation challenge, opportunity to use a shiny, new technology, your personal biases, or anything else that inevitably creeps into our decision-making as developers.</p>\n<blockquote id=\"0d2c\">Think about your user at every step, like your product&rsquo;s success depends on&nbsp;them.</blockquote>\n<p id=\"b859\">Because it does.</p>\n<figure id=\"02ef\">\n<div>\n<div>&nbsp;</div>\n<img src=\"https://cdn-images-1.medium.com/max/1600/1*UrU4lEMyukeMZnKO5LbMQw.png\" data-image-id=\"1*UrU4lEMyukeMZnKO5LbMQw.png\" data-width=\"408\" data-height=\"38\" /></div>\n</figure>\n<p id=\"860b\">Thanks for reading this quick guide. This was originally published as part of the&nbsp;<a href=\"https://www.commonlounge.com/discussion/d8c1c96e92024adf9f496fe41dcaad1a\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.commonlounge.com/discussion/d8c1c96e92024adf9f496fe41dcaad1a\">UX Design course</a>&nbsp;(it has real-world projects on these concepts!) on&nbsp;<a href=\"https://www.commonlounge.com/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.commonlounge.com/\">Commonlounge</a>, a platform that has courses with small bite-sized lessons like these on topics ranging from&nbsp;<a href=\"https://www.commonlounge.com/discussion/8053bde657804a6b9135c0d781c9d2c7\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.commonlounge.com/discussion/8053bde657804a6b9135c0d781c9d2c7\">Django</a>&nbsp;to&nbsp;<a href=\"https://www.commonlounge.com/discussion/35ccdb70826e434a876d612504297232\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.commonlounge.com/discussion/35ccdb70826e434a876d612504297232\">Machine Learning</a>&nbsp;that deliver the most value for the time you put in.</p>\n<p id=\"f19a\">You learn by working on real-world projects and getting feedback from industry mentors. Want&nbsp;free&nbsp;<a href=\"https://www.commonlounge.com/upgrade\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.commonlounge.com/upgrade\">Pro</a>&nbsp;access&nbsp;for a month? Help me spread the word by giving&nbsp;50 claps, and DM me on&nbsp;<a href=\"https://twitter.com/anant90\" target=\"_blank\" rel=\"noopener\" data-href=\"https://twitter.com/anant90\">Twitter</a>&nbsp;😊</p>\n</div>",
      "tags": [
        {
          "name": "ux"
        },
        {
          "name": "ui"
        },
        {
          "name": "personas"
        },
        {
          "name": "design"
        }
      ],
      "category": "Announcement",
      "subCategory": null,
      "allowComments": true
    },
    {
      "id": 10,
      "title": "Rick and Morty Teach JavaScript Hoisting",
      "author": "C5 Test01",
      "publicationDate": "2018-06-22T04:00:00.000Z",
      "summary": "This is a fan-fictional representation of Rick and Morty. This post is not sponsored by the show.",
      "content": "<p id=\"971d\">Morty: Here&rsquo;s a question I&rsquo;d like answered. Why does this work? What is this Jedi nonsense?</p>\n<pre id=\"4919\">sayMyNameSayMyName('Morty'); // 'I said your name, Morty.'<br /><br /></pre>\n<pre id=\"651b\">function sayMyNameSayMyName(name){<br />   return `I said your name,${name}.`;<br />}</pre>\n<p id=\"7f4a\">Rick: Hoisting.</p>\n<p id=\"4283\">Morty: Yeah, yeah, but what is hoisting exactly?</p>\n<p id=\"ad7a\">Rick: I will attempt to utilize the gerund that labels this quirky phenomenon to help with the definition. Here goes.&nbsp;ahem&nbsp;Declarations, whether they are a variable or function, are lifted up to the top of your program.</p>\n<p id=\"76f9\">Morty: Okay, that&rsquo;s digestible. Sort of. But wait&hellip;so you&rsquo;re telling me that this can&rsquo;t be hoisted with the Force?</p>\n<pre id=\"5d93\">sayMyNameSayMyName('Morty'); // TypeError: undefined is not a function</pre>\n<pre id=\"a639\"> var sayMyNameSayMyName = function(name){<br />   return `I said your name,${name}.`;<br />}</pre>\n<p id=\"fe26\">Rick: Well, you see, declarations get special treatment. Assignments are second class, so to speak. They don&rsquo;t get the privilege of being hoisted.</p>\n<p id=\"2019\">Morty:But why?</p>\n<p id=\"3a39\">Rick:It&rsquo;s the execution context. That&rsquo;s to blame.</p>\n<p id=\"940b\">Morty:Execution what?</p>\n<p id=\"2637\">Rick: Every line of code has a context. There are two key contexts to keep in mind. You have the global and the function context. It looks like this:</p>\n<pre id=\"7d03\">/*Global--woohooo I'm freee*/</pre>\n<pre id=\"e725\">two(); // 2</pre>\n<pre id=\"b075\">function two(){<br /> /*Function<br />   ========<br />*/</pre>\n<pre id=\"4519\"> return 2;  <br /><br /></pre>\n<pre id=\"e160\">}</pre>\n<p id=\"b687\">Morty: Wait. Context is the same as scope, right?</p>\n<p id=\"70f6\">Rick:&nbsp;Sigh</p>\n<p id=\"8a14\">You have much to learn young Jedi. No, scope refers to access. If a variable is declared in a global scope, it can be accessed by functions or blocks. Functions are unicorns because they create their own scope. But that differs from context.</p>\n<p id=\"50d7\">You see, we can all say that we are from planet Earth. That is our global context. But we cannot all say that we are from Washington DC. That is the function context. In JavaScript, you can determine the current context with the&nbsp;this&nbsp;keyword.</p>\n<p id=\"8a25\">Morty: So what does context have to do with hoisting?</p>\n<p id=\"5a71\">Rick: Yes, so&hellip;</p>\n<p id=\"f155\">First, imagine that the interpreter is an alien who found your signal and is now looking for you. The alien would start on planet earth, our global context. There are seven continents on Earth. It might start in North America.</p>\n<p id=\"3b1f\">Morty: Why?</p>\n<p id=\"a550\">Rick: It loves North America&rsquo;s bizarre geometry.</p>\n<p id=\"e709\">Anyway, it will then create a scope chain containing your possible country, then your state, then your city, then your street.</p>\n<p id=\"10cf\">Now, let&rsquo;s try to look within the mind of JavaScript&rsquo;s interpreter. When the interpreter reads code, it automatically enters the global context.</p>\n<p id=\"d03a\">The interpreter does something similar to the alien&rsquo;s search tactics by first looking for a function invocation(the signal). It won&rsquo;t execute it until it can create the context(find your info).</p>\n<p id=\"0fa3\">There are two stages the interpreter goes through to accomplish its mission: the creation stage and the execution stage.</p>\n<h3 id=\"3662\">1) Mind you, we&rsquo;re entering the creation&nbsp;stage.</h3>\n<p id=\"51af\">A function can have multiple functions within it, so the interpreter will initialize a scope chain(country,state,city,street).</p>\n<p id=\"b0c4\">It will create a&nbsp;variable object&nbsp;to hold all sorts of arguments, parameters, and function/variable declarations.</p>\n<p id=\"fb2a\">It then creates&nbsp;this&nbsp;to store the current context.</p>\n<p id=\"08dc\">This is an oversimplification. We&rsquo;ll simplify it further by only concerning ourselves with how the interpreter deals with function declarations versus variable declarations.</p>\n<p id=\"606d\">Function:</p>\n<p id=\"242c\">When the interpreter&rsquo;s nose bumps against a&nbsp;function&nbsp;keyword, it looks for the name. It then stores a reference to that function name in variables object.</p>\n<p id=\"a10b\">Variable:</p>\n<p id=\"acd7\">When the interpreter&rsquo;s nose bumps against a&nbsp;var,&nbsp;let, or any keyword associated with variables, it first stores the variable name in variable objects. Then it automatically initializes it with undefined.</p>\n<p id=\"4b5c\">Can you start to see how assigning a function to a variable and hoping it will be hoisted does not work? When we invoke&nbsp;myNameIs(name), the interpreter will find our function expression, but it will only read in the variable name and assign undefined to it.</p>\n<pre id=\"d12c\">sayMyNameSayMyName('Morty'); // 'I said your name, Morty.'<br /> myNameIs('Morty'); // undefined</pre>\n<pre id=\"970b\">//<br />function sayMyNameSayMyName(name){<br />   return `I said your name,${name}.`;</pre>\n<pre id=\"9359\">}<br /><br /></pre>\n<pre id=\"8c85\">var myNameIs = function(name){<br />   return `your name is,${name}.`;<br />}</pre>\n<p id=\"0016\">You&rsquo;ll understand this more in the next stage.</p>\n<h3 id=\"7c4b\">2) The Execution Stage</h3>\n<p id=\"bb39\">In the execution stage, values are assigned to variables within the execution context.</p>\n<p id=\"f343\">The problem with calling&nbsp;myNameis()&nbsp;early is that the interpreter has assigned undefined tomyNameIs()&nbsp;in the creation stage. If you had invoked&nbsp;myNameIs()&nbsp;after the function expression, the interpreter would have had time to assign the value of&nbsp;myNameIs()&nbsp;within the global context during the execution stage.</p>\n<p id=\"1198\">Invoking&nbsp;sayMyNameSayMyName()&nbsp;works because a reference to the declared function is stored in the creation stage. When the code is executed, we're able to run it without a problem.</p>\n<h3 id=\"6dc6\">Conclusion</h3>\n<p id=\"7cd8\">Morty: So&hellip;hoisting is all about execution context?</p>\n<p id=\"9d32\">Rick: Yep.</p>",
      "tags": [
        {
          "name": "rick"
        },
        {
          "name": "morty"
        },
        {
          "name": "hoisting"
        },
        {
          "name": "lifting"
        },
        {
          "name": "javascript"
        }
      ],
      "category": "Announcement",
      "subCategory": null,
      "allowComments": true
    },
    {
      "id": 11,
      "title": "The Basics - Getting Started",
      "author": "undefined undefined",
      "publicationDate": "2018-06-23T04:00:00.000Z",
      "summary": "The Basics of Consuming REST APIs",
      "content": "<p>APIs are becoming a very popular and are a must-know for every type of developer. But, what is an API? API stands for Application Programming Interface. It is a way to get one software application to talk to another software application. In this article, I&rsquo;ll go over the basics of what they are and why to use them.</p>\n<p>Nom Nom Nom! I happened to be snacking on chips while trying to think of a name for my&nbsp;<a href=\"http://sched.co/BiDk\">REST API talk</a>&nbsp;coming up at&nbsp;<a href=\"http://events.linuxfoundation.org/events/apistrat\">APIStrat in Portland</a>. Similarly, the act of consuming or using a REST API means to eat it all up. In context, it means to eat it, swallow it, and digest it &mdash; leaving any others in the pile exposed. Sounds yummy, right?</p>\n<p>It seems that every application out there is hungry for an API. Let&rsquo;s look at Yelp for example. Yelp by itself won&rsquo;t have the functionality you&rsquo;d expect. In order to search nearby restaurants or locations, it needs to use an API for a map. It uses the Google API. With that, you can locate nearest places and get directions to the place. APIs allow you to integrate one tool into another tool to give it more functionality. Without the ability to make these types of integrations, you can say goodbye to a majority of all the apps out there that you use!</p>\n<p>So why are APIs so important? Most companies today have several different software applications they need to use, including sales, accounting, CRM, a project management system, etc. To have the software all work together is increasingly important for financial reasons, which is also making work processes flow more easily. Companies can also create their own tools using other APIs to enhance their own software, making their customers happier and giving them the tools they need.</p>\n<h3>API Basics</h3>\n<p>Back in 2000, the very first API came from eBay. Since then, they have increased exponentially. In 2016, more than 50 million API requests have been made, and there are 30,000 available APIs out there. From 2015 to 2016, the number has doubled in growth from 15,000 to 30,000 APIs!</p>\n<p>In my talk, I will be covering API basics, how to make API requests, how APIs are made, and much more. &nbsp;I will show you how you can use POSTMAN to test making REST API calls, so that you will leave with the skills to make REST calls on any API. This talk is designed for any audience level. If you are brand new to programming, that&rsquo;s fine. If you are an experienced programmer that currently uses APIs but want to go back into the basics to understand the breakdown of how APIs work, then that is fine, too!</p>\n<p>If you want to learn more, be sure to check out my other talk at APIStrat:&nbsp;<a href=\"http://sched.co/BiDJ\">&nbsp;&ldquo;Chatbots are the Future: Let&rsquo;s Build One!&rdquo;</a>&nbsp;In this talk, I will go over how to build a working Chatbot using the Cisco Spark API, which is a collaboration API for chat (messages), calling, and video. You don&rsquo;t need to install or download anything to prepare. I will cover everything in the presentation, and it is designed for everyone to follow along. I guarantee you will have a working chatbot by the end of the presentation.</p>\n<p>You can learn more at the upcoming&nbsp;<a href=\"http://events.linuxfoundation.org/events/apistrat\">APIStrat conference</a>.&nbsp;</p>",
      "tags": [
        {
          "name": "consuming"
        },
        {
          "name": "api documentation"
        },
        {
          "name": "api key"
        },
        {
          "name": "apikey"
        }
      ],
      "category": "Documentation",
      "subCategory": "Consuming APIs",
      "allowComments": true
    },
    {
      "id": 12,
      "title": "Generate API Key",
      "author": "undefined undefined",
      "publicationDate": "2018-06-23T04:00:00.000Z",
      "summary": "To use the Maps Embed API, you must register your app project on the Google Cloud Platform Console and get a Google API key which you can add to your app or website.",
      "content": "<h1>Get API Key</h1>\n<div>\n<p>To use the Maps JavaScript API, you must register your app project on the Google Cloud Platform Console and get a Google API key which you can add to your app.</p>\n<h2>&nbsp;</h2>\n<h2 id=\"quick-guide-to-getting-a-key\">Quick guide to getting a key</h2>\n<h3>&nbsp;</h3>\n<h3 id=\"step-1-get-an-api-key-from-the-google-cloud-platform-console\">Step 1: Get an API Key from the Google Cloud Platform Console</h3>\n<p>Click the button below, which guides you through the process of registering a project in the Google Cloud Platform Console, activates the Maps JavaScript API and any related services automatically, and generates a generic, unrestricted API key.</p>\n<a href=\"https://cloud.google.com/maps-platform/#get-started\" target=\"_blank\" rel=\"noopener\" data-category=\"getKey\" data-action=\"buttonClick\" data-label=\"body\">GET STARTED</a>\n<p>Notes:</p>\n<ul>\n<li>Tip:&nbsp;During development and testing, you can register a project for testing purposes in the Google Cloud Platform Console and use a generic, unrestricted API key. When you are ready to move your app or website into production, register a separate project for production, create a browser-restricted API key, and add the key to your application.</li>\n<li>Premium Plan customers: For production-ready apps, you must use a browser-restricted API key that is set up in the Google Maps APIs Premium Plan project created for you when you purchased the Premium Plan. Alternatively, you can&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#client-id\">use a client ID</a>&nbsp;in combination with URL registration (instead of an API key).</li>\n<li>For more information, see the detailed guides below for&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#standard-auth\">Standard Plan</a>&nbsp;and&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#premium-auth\">Premium Plan</a>customers.</li>\n</ul>\n<h3>&nbsp;</h3>\n<h3 id=\"step-2-add-the-api-key-to-your-application\">Step 2: Add the API key to your application</h3>\n<p>When loading the Maps JavaScript API, substitute&nbsp;YOUR_API_KEY&nbsp;in the code below with the API key you got from the previous step.</p>\n<div>\n<div data-category=\"Site-Wide Custom Events\" data-label=\"Dark Code Toggle\" data-tooltip-align=\"b,c\" data-tooltip=\"Dark code theme\" aria-label=\"Dark code theme\" data-title=\"Dark code theme\">&nbsp;</div>\n<div data-category=\"Site-Wide Custom Events\" data-label=\"Click To Copy\" data-tooltip-align=\"b,c\" data-tooltip=\"Click to copy\" aria-label=\"Click to copy\" data-title=\"Click to copy\">&nbsp;</div>\n</div>\n<pre>&nbsp; &lt;script async defer src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;callback=initMap\"<br />&nbsp; type=\"text/javascript\"&gt;&lt;/script&gt;</pre>\n<h2>&nbsp;</h2>\n<h2 id=\"key\">More about API keys</h2>\n<ul>\n<li>The API key allows you to monitor your application's API usage in the Google Cloud Platform Console. See&nbsp;<a href=\"https://support.google.com/googleapi/#topic=7013279\">Google Cloud Platform Console help</a>&nbsp;for more information.</li>\n<li>If you are a Standard Plan customer, with an API key you have access to generous&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/usage\">free daily quota</a>, as well as the option to increase your daily quota by&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/usage#increase_quota\">enabling pay-as-you-go billing</a>.</li>\n<li>If you are a Premium Plan customer, you must use an API key or your client ID to access all the custom features and benefits of your Premium Plan.</li>\n<li>Registering for an API key ensures that Google can contact you about your application if necessary.</li>\n</ul>\n<h2>&nbsp;</h2>\n<h2 id=\"standard-auth\">Detailed guide for users of the standard Google Maps JavaScript API</h2>\n<p>Follow these steps to get an API key:</p>\n<ol>\n<li>Go to the&nbsp;<a href=\"https://cloud.google.com/console/google/maps-apis/overview\" target=\"blank\" data-category=\"getKey\" data-action=\"linkClick\" data-label=\"body\">Google Cloud Platform Console</a>.</li>\n<li>Create or select a project.</li>\n<li>Click&nbsp;Continue&nbsp;to enable the API and any related services.</li>\n<li>On the&nbsp;Credentials&nbsp;page, get an&nbsp;API key.&nbsp;<br />Note: If you have an existing unrestricted API key, or a key with browser restrictions, you may use that key.</li>\n<li>From the dialog displaying the API key, select&nbsp;Restrict key&nbsp;to set a browser restriction on the API key.</li>\n<li>In the&nbsp;Key restriction&nbsp;section, select&nbsp;HTTP referrers (web sites), then follow the on-screen instructions to set referrers.</li>\n<li>(Optional) Enable billing. See&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/usage\">Usage Limits</a>&nbsp;for more information.</li>\n</ol>\n<p>For more information on using the Google Cloud Platform Console, see&nbsp;<a href=\"https://support.google.com/googleapi\">API Console Help</a>.</p>\n<h2>&nbsp;</h2>\n<h2 id=\"premium-auth\">Detailed guide for users of the Google Maps APIs Premium Plan license</h2>\n<p>When using the Maps JavaScript API with a&nbsp;<a href=\"https://developers.google.com/maps/premium/overview\">Google Maps APIs Premium Plan license</a>, you must authenticate your application with either an API key or a client ID.<br />Note:&nbsp;If you have a&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#prev-license\">previous Maps API for Business</a>&nbsp;license, you must use a client ID, not an API key.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"clientID-features\">Choosing an authentication method for your application</h3>\n<p>The section below provides a summary of the various tools and reports that are available to Premium Plan customers, based on the method you choose to authenticate your application.</p>\n<ul>\n<li>Authentication using an API key<br />(Note:&nbsp;Customers with a current Premium Plan license may use an API key, but customers holding a&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#prev-license\">previous Maps API for Business</a>&nbsp;license must use a client ID.)<br />By using an API key to authenticate your applications, you can:\n<ul>\n<li>Manage all of your APIs in the&nbsp;<a href=\"https://console.developers.google.com/project/_/apis/enabled\" target=\"_blank\" rel=\"noopener\">Google Cloud Platform Console</a>.</li>\n<li>Access real-time usage data and 30 days of historical usage data for your application in the&nbsp;<a href=\"https://console.developers.google.com/project/_/apis/enabled\" target=\"_blank\" rel=\"noopener\">Google Cloud Platform Console</a>.</li>\n<li>View usage reports with more than 30 days of data in the&nbsp;<a href=\"https://google.secure.force.com/\" target=\"_blank\" rel=\"noopener\">Google Cloud Support Portal</a>.</li>\n</ul>\n</li>\n<li>Authentication using a Client ID<br />By using your client ID (instead of an API key) to authenticate your application, you can:\n<ul>\n<li>Add the&nbsp;channel&nbsp;parameter to requests so you can view more detailed usage reports.</li>\n<li>View usage reports with more than 30 days of data in the&nbsp;<a href=\"https://google.secure.force.com/\" target=\"_blank\" rel=\"noopener\">Google Cloud Support Portal</a>.</li>\n<li>Use Maps Analytics tools for the Maps JavaScript API.</li>\n</ul>\n</li>\n</ul>\n<p>Get more information on&nbsp;<a href=\"https://developers.google.com/maps/premium/reports/\">reports available to Premium Plan customers</a>.</p>\n<p>Note:&nbsp;The information below on using an API key applies only to the Google Maps APIs Premium Plan, which became available on&nbsp;January 6, 2016.</p>\n<div id=\"prev-license\">&nbsp;</div>\n<p>Have a&nbsp;previous&nbsp;Maps APIs for Work or Maps API for Business license?&nbsp;See our&nbsp;<a href=\"https://developers.google.com/maps/premium/previous-licenses/\">Maps APIs for Work Licenses guide</a>. To determine whether you have a previous license: In the&nbsp;<a href=\"https://google.secure.force.com/\">Google Cloud Support Portal</a>, click&nbsp;Maps: Usage Report&nbsp;on the left. If the ID at the top of the report is in the following format, you have the new Premium Plan:&nbsp;<br />gme-[company] &amp; proj-[number] ([type])<br />Otherwise, you have a previous license.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"premium-key\">Authenticating your application using an API key</h3>\n<p>Follow these steps to get an API key:</p>\n<ol>\n<li>Go to the&nbsp;<a href=\"https://cloud.google.com/console/google/maps-apis/overview\" target=\"blank\" data-category=\"getKey\" data-action=\"linkClick\" data-label=\"body\">Google Cloud Platform Console</a>.</li>\n<li>From the Project drop-down menu, select the project created for you when you purchased the Premium Plan. The project name starts with&nbsp;Google Maps APIs for Business or Google Maps for Work or Google Maps.&nbsp;Important:&nbsp;If you have a&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#prev-license\">previous Maps API for Business</a>&nbsp;license, you must use a client ID, not an API key.</li>\n<li>Click&nbsp;Continue.</li>\n<li>On the&nbsp;Credentials&nbsp;page, get an&nbsp;API key.&nbsp;<br />Note: If you have an existing unrestricted API key, or a key with browser restrictions, you may use that key.</li>\n<li>From the dialog displaying the API key, select&nbsp;Restrict key&nbsp;to set a browser restriction on the API key.</li>\n<li>In the&nbsp;Key restriction&nbsp;section, select&nbsp;HTTP referrers (web sites), then follow the on-screen instructions to set referrers.</li>\n</ol>\n<p>For more information on using the Google Cloud Platform Console, see&nbsp;<a href=\"https://support.google.com/cloud/?hl=en&amp;authuser=0#topic=3340599\">Google Cloud Platform Console Help Center</a>.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"client-id\">Authenticating your application using a client ID</h3>\n<p>Upon purchasing your&nbsp;<a href=\"https://developers.google.com/maps/premium/overview\">Google Maps APIs Premium Plan license</a>, you will receive a welcome email from Google that contains your&nbsp;client ID, which allows to access the&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#clientID-features\">various reports and tools of the Google Maps APIs Premium Plan</a>.</p>\n<p>All client IDs begin with a&nbsp;gme-&nbsp;prefix. Below is the format of a typical client ID.</p>\n<p>gme-[company] &amp; proj-[number] ([type])</p>\n<p>You can authenticate your application with the Maps JavaScript API using a client ID in combination with&nbsp;URL registration&nbsp;(instead of an API key).</p>\n<p>Note: This client ID is not a key, and it can only be used by URLs that you authorize. Read more about&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key#registering-authorized-urls\">registering authorized URLs</a>.</p>\n<h3>&nbsp;</h3>\n<h3 id=\"specifying-a-client-id-when-loading-the-api\">Specifying a client ID when loading the API</h3>\n<p>The code below shows you how to substitute YOUR_CLIENT_ID with your own client ID when loading the Maps JavaScript API.</p>\n<div>\n<div data-category=\"Site-Wide Custom Events\" data-label=\"Dark Code Toggle\" data-tooltip-align=\"b,c\" data-tooltip=\"Dark code theme\" aria-label=\"Dark code theme\" data-title=\"Dark code theme\">&nbsp;</div>\n<div data-category=\"Site-Wide Custom Events\" data-label=\"Click To Copy\" data-tooltip-align=\"b,c\" data-tooltip=\"Click to copy\" aria-label=\"Click to copy\" data-title=\"Click to copy\">&nbsp;</div>\n</div>\n<pre>&nbsp; &lt;script async defer<br />&nbsp; src=\"https://maps.googleapis.com/maps/api/js?client=YOUR_CLIENT_ID&amp;v=3.32&amp;callback=initMap\"&gt;&lt;/script&gt;</pre>\n<p>You must specify the&nbsp;<a href=\"https://developers.google.com/maps/documentation/javascript/versions\">release version</a>&nbsp;(also referred to as the&nbsp;feature-stable&nbsp;version) or an earlier version, by appending a&nbsp;v=3.32&nbsp;parameter. Applications that use the experimental version are not covered under the Google Maps APIs Premium Plan SLA.</p>\n<p>Note: If you were previously using an API key for authentication and are switching to using a client ID, you must remove the&nbsp;key&nbsp;parameter before loading the API.&nbsp;The API will fail to load if both a client ID and an API key are included.</p>\n<h2>&nbsp;</h2>\n<h2 id=\"key-restrictions\">Restricting an API key</h2>\n<p>Google Maps APIs are available for web browsers, Android or iOS apps, and via HTTP web services. APIs in any platform can use a generic (unrestricted) API key. You can optionally add a restriction (for example, HTTP referrer) to the API key. Once restricted, a key will only work on platforms that support that type of restriction.</p>\n<p>Tip: Before moving your app or website to production, you should secure your API key. Keys for the Maps JavaScript API use the&nbsp;HTTP referrers (web sites)&nbsp;key restriction.&nbsp;<a href=\"https://developers.google.com/maps/faq#keysystem\">Learn more about keys and credentials</a>.</p>\n<p>To add web browser restrictions to an existing, generic API key, do the following:</p>\n<ol>\n<li>Go to the Credentials page of the&nbsp;<a href=\"https://console.developers.google.com/project/_/apiui/credential\" target=\"_blank\" rel=\"noopener\" data-category=\"updateKeyRestrictions\" data-action=\"linkClick\" data-label=\"body\">Google Cloud Platform Console</a>.</li>\n<li>Select the project that contains the API key you want to edit.</li>\n<li>On the&nbsp;Credentials&nbsp;page, from the list of API keys, select the name of the API key to edit the details of the key.</li>\n<li>In the&nbsp;Key restriction&nbsp;section of the page, select&nbsp;HTTP referrers (web sites), follow the on-screen instructions to set referrers, then click&nbsp;Save.</li>\n</ol>\n<p>Note:&nbsp;file:// referers need a special representation to be added to the Key restriction. The \"file:/\" part should be replaced with \"__file_url__\" before being added to the Key restriction. For example, \"file:///path/to/\" should be formatted as \"__file_url__//path/to/*\". After enabling file:// referers, it is recommended you regularly check your usage, to make sure it matches your expectations.</p>\n<h2 id=\"registering-authorized-urls\">Registering authorized URLs</h2>\n<p>To prevent a third party from using your client ID on their own website, the use of your client ID is restricted to a list of URLs that you specifically authorize.</p>\n<p>To see the URLs you have already authorized or to authorize additional URLs:</p>\n<ol>\n<li>Log in to the&nbsp;<a href=\"https://google.secure.force.com/\">Google Cloud Support Portal</a>.</li>\n<li>In the left-hand menu, click&nbsp;Maps: Manage Client ID.</li>\n</ol>\n<p>You can add up to 100 URLs at a time. A Client ID may be associated with up to 3000 authorized URLs. If you expect your application to host Google Maps content from more than 3000 locations, you should switch to using API keys instead.</p>\n<p>The following considerations apply regarding URLs that are authorized:</p>\n<dl>\n<dt>The domain name or IP address does not have to be publicly accessible.</dt>\n<dd>For example,&nbsp;http://myintranet&nbsp;and&nbsp;http://192.168.1.1&nbsp;are valid entries.</dd>\n<dt>All subdomains of a specified domain are also authorized.</dt>\n<dd>For example, if&nbsp;http://example.com&nbsp;is authorized, then&nbsp;http://www.example.com&nbsp;is also authorized. The reverse is not true: if&nbsp;http://www.example.com&nbsp;is authorized,http://example.com&nbsp;is not necessarily authorized.</dd>\n<dt>All subpaths of an authorized path are also authorized.</dt>\n<dd>For example, if&nbsp;http://example.com&nbsp;is authorized, then&nbsp;http://example.com/foo&nbsp;is also authorized. In addition, because subdomains of a specified domain are also authorized,http://sub.example.com/bar&nbsp;is authorized.</dd>\n<dt>Paths are case sensitive.</dt>\n<dd>For example,&nbsp;http://www.example.com/ThisPath/&nbsp;is not the same as&nbsp;http://www.example.com/thispath/.</dd>\n<dt>You may restrict valid URLs to those using certain ports.</dt>\n<dd>For example, if&nbsp;http://example.com:8080/foo&nbsp;is specified, that doesn't authorize&nbsp;http://example.com.</dd>\n<dt>HTTP and HTTPS protocols are considered different URLs.</dt>\n<dd>For example, if&nbsp;https://example.com&nbsp;is authorized,&nbsp;http://example.com&nbsp;is not necessarily authorized. If you'd like to authorize both at once, you may add a domain without using a protocol:&nbsp;example.com/</dd>\n</dl>\n<p>All the rules above are applied to each authorization, so you should take care to plan your authorizations carefully. For example, because all subpaths of a specified path are authorized, and all subdomains, you may end up authorizing pages that you didn't intend to. For example:</p>\n<p>http://example.com/&nbsp;also authorizes&nbsp;http://sub.example.com/path.</p>\n<p>For more information, see&nbsp;<a href=\"https://developers.google.com/maps/premium/troubleshooting-auth/\">Troubleshooting Google Maps APIs Premium Plan Authorization</a>.</p>\n</div>",
      "tags": [
        {
          "name": "Consuming"
        },
        {
          "name": "API key"
        },
        {
          "name": "key"
        }
      ],
      "category": "Documentation",
      "subCategory": "Consuming APIs",
      "allowComments": true
    }
  ]
}